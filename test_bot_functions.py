#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤, –Ω–æ–≤–æ—Å—Ç–∏, –ø–æ–∏—Å–∫ –∏ —Ç.–¥.
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

async def test_news_function():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π"""
    print("\n" + "="*50)
    print("üß™ –¢–ï–°–¢: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
    print("="*50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ bot.py
        from dotenv import load_dotenv
        load_dotenv('env_file.txt')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        import bot
        if hasattr(bot, 'RUSSIAN_HORECA_SOURCES'):
            sources = bot.RUSSIAN_HORECA_SOURCES
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources)}")
            for name, info in list(sources.items())[:3]:
                print(f"  - {info['name']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
        if hasattr(bot, 'get_russian_horeca_news'):
            print("\nüì∞ –¢–µ—Å—Ç–∏—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é get_russian_horeca_news()...")
            print("   (–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-15 —Å–µ–∫—É–Ω–¥)")
            
            news = await bot.get_russian_horeca_news()
            
            if news and "‚ùå –û—à–∏–±–∫–∞" not in news:
                print("‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                print(f"\nüìÑ –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:\n{news[:200]}...")
                return True
            else:
                print(f"‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {news[:100]}")
                return False
        else:
            print("‚ùå –§—É–Ω–∫—Ü–∏—è get_russian_horeca_news –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_flavor_pairs():
    """–¢–µ—Å—Ç –±–∞–∑—ã –≤–∫—É—Å–æ–≤—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π"""
    print("\n" + "="*50)
    print("üß™ –¢–ï–°–¢: –ë–∞–∑–∞ –≤–∫—É—Å–æ–≤—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π")
    print("="*50)
    
    try:
        import bot
        
        if hasattr(bot, 'FLAVOR_PAIRS'):
            pairs = bot.FLAVOR_PAIRS
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∫—É—Å–æ–≤—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π: {len(pairs)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
            test_flavors = ['—è–±–ª–æ–∫–æ', '–∫–ª—É–±–Ω–∏–∫–∞', '–æ–≥—É—Ä–µ—Ü', '–ª–∏–º–æ–Ω']
            for flavor in test_flavors:
                if flavor in pairs:
                    combinations = pairs[flavor]
                    print(f"  ‚úÖ {flavor}: {len(combinations)} —Å–æ—á–µ—Ç–∞–Ω–∏–π")
                    print(f"     –ü—Ä–∏–º–µ—Ä—ã: {', '.join(combinations[:3])}")
            
            return True
        else:
            print("‚ùå FLAVOR_PAIRS –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_seasonal_ingredients():
    """–¢–µ—Å—Ç —Å–µ–∑–æ–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"""
    print("\n" + "="*50)
    print("üß™ –¢–ï–°–¢: –°–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã")
    print("="*50)
    
    try:
        import bot
        
        if hasattr(bot, 'SEASONAL_INGREDIENTS'):
            seasons = bot.SEASONAL_INGREDIENTS
            current_season = getattr(bot, 'CURRENT_SEASON', 'autumn')
            
            print(f"‚úÖ –¢–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω: {current_season}")
            
            if current_season in seasons:
                ingredients = seasons[current_season]
                print(f"‚úÖ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞: {len(ingredients)}")
                print(f"   –ü—Ä–∏–º–µ—Ä—ã: {', '.join(ingredients[:5])}")
                return True
            else:
                print(f"‚ö†Ô∏è  –°–µ–∑–æ–Ω {current_season} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ SEASONAL_INGREDIENTS")
                return False
        else:
            print("‚ùå SEASONAL_INGREDIENTS –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\n" + "="*50)
    print("üß™ –¢–ï–°–¢: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("="*50)
    
    try:
        from database import CocktailDatabase
        
        db = CocktailDatabase()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        test_queries = ['–¥–∂–∏–Ω', '–º–æ—Ö–∏—Ç–æ', '–≤–∏—Å–∫–∏']
        for query in test_queries:
            try:
                results = db.search_recipes(query)
                count = len(results) if results else 0
                print(f"  ‚úÖ –ü–æ–∏—Å–∫ '{query}': –Ω–∞–π–¥–µ–Ω–æ {count} —Ä–µ—Ü–µ–ø—Ç–æ–≤")
            except Exception as e:
                print(f"  ‚ö†Ô∏è  –ü–æ–∏—Å–∫ '{query}': –æ—à–∏–±–∫–∞ ({str(e)[:50]})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("="*50)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ô –ë–û–¢–ê")
    print("="*50)
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    results = {
        '–ë–∞–∑–∞ –≤–∫—É—Å–æ–≤—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π': await test_flavor_pairs(),
        '–°–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã': await test_seasonal_ingredients(),
        '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö': await test_database(),
        '–ù–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤': await test_news_function(),
    }
    
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*50)
    
    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} - {test_name}")
    
    passed = sum(results.values())
    total = len(results)
    
    print(f"\n‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç(–æ–≤) –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    print("="*50)

if __name__ == '__main__':
    asyncio.run(main())

