#!/usr/bin/env python3
"""
MIXTRIX Bot - –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
"""

import asyncio
import os
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('mixtrix.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('env_file.txt')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not os.getenv('TELEGRAM_BOT_TOKEN'):
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)

if not os.getenv('YANDEX_API_KEY'):
    logger.error("YANDEX_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)

if not os.getenv('FOLDER_ID'):
    logger.error("FOLDER_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)

logger.info("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
try:
    from database import CocktailDatabase
    from hybrid_processor import HybridCocktailProcessor
    from cocktail_party_processor import CocktailPartyProcessor
    
    db = CocktailDatabase()
    hybrid_processor = HybridCocktailProcessor()
    party_processor = CocktailPartyProcessor()
    
    logger.info("–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
    exit(1)

# –°–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –†–æ—Å—Å–∏–∏
SEASONAL_INGREDIENTS = {
    'winter': ['–∫–ª—é–∫–≤–∞', '–±—Ä—É—Å–Ω–∏–∫–∞', '–æ–±–ª–µ–ø–∏—Ö–∞', '—Ü–∏—Ç—Ä—É—Å—ã', '–∫–æ—Ä–∏—Ü–∞', '–≥–≤–æ–∑–¥–∏–∫–∞', '–º—É—Å–∫–∞—Ç–Ω—ã–π –æ—Ä–µ—Ö', '–≤–∞–Ω–∏–ª—å'],
    'spring': ['—Ä–µ–≤–µ–Ω—å', '—â–∞–≤–µ–ª—å', '–º–æ–ª–æ–¥—ã–µ —Ç—Ä–∞–≤—ã', '—Ü–≤–µ—Ç—ã —Å–∏—Ä–µ–Ω–∏', '—á–µ—Ä–µ–º—É—Ö–∞', '–º–µ–ª–∏—Å—Å–∞', '–º—è—Ç–∞'],
    'summer': ['–∫–ª—É–±–Ω–∏–∫–∞', '–º–∞–ª–∏–Ω–∞', '—Å–º–æ—Ä–æ–¥–∏–Ω–∞', '–∫—Ä—ã–∂–æ–≤–Ω–∏–∫', '–≤–∏—à–Ω—è', '–±–∞–∑–∏–ª–∏–∫', '—É–∫—Ä–æ–ø', '–ø–µ—Ç—Ä—É—à–∫–∞'],
    'autumn': ['—è–±–ª–æ–∫–∏', '–≥—Ä—É—à–∏', '—Å–ª–∏–≤—ã', '—Ç—ã–∫–≤–∞', '–∫–∞–ª–∏–Ω–∞', '—Ä—è–±–∏–Ω–∞', '–æ—Ä–µ—Ö–∏', '–º–µ–¥']
}

CURRENT_SEASON = 'autumn'
BASE_SPIRITS = ['–¥–∂–∏–Ω', '–≤–æ–¥–∫–∞', '—Ä–æ–º', '–≤–∏—Å–∫–∏', '—Ç–µ–∫–∏–ª–∞', '–∫–æ–Ω—å—è–∫', '–±—Ä–µ–Ω–¥–∏']

# Yandex Cloud AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
YANDEX_API_KEY = os.getenv('YANDEX_API_KEY')
YANDEX_FOLDER_ID = os.getenv('FOLDER_ID')
YANDEX_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

async def call_yandex_api(prompt: str) -> str:
    """–í—ã–∑–æ–≤ Yandex Cloud AI API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }
    
    data = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt",
        "completionOptions": {
            "stream": False,
            "temperature": 0.7,
            "maxTokens": 1000
        },
        "messages": [
            {
                "role": "user",
                "text": prompt
            }
        ]
    }
    
    try:
        import requests
        response = requests.post(YANDEX_API_URL, headers=headers, json=data, timeout=30)
        response.raise_for_status()
        result = response.json()
        
        if 'result' in result and 'alternatives' in result['result']:
            return result['result']['alternatives'][0]['message']['text']
        else:
            return "–û—à–∏–±–∫–∞: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Yandex API"
            
    except requests.exceptions.Timeout:
        return "–û—à–∏–±–∫–∞: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Yandex API"
    except requests.exceptions.ConnectionError:
        return "–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Yandex API"
    except requests.exceptions.HTTPError as e:
        return f"–û—à–∏–±–∫–∞ HTTP: {e.response.status_code}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Yandex AI: {str(e)}"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
dp = Dispatcher()

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
async def create_bot():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    connector = aiohttp.TCPConnector(
        limit=100,
        limit_per_host=30,
        ttl_dns_cache=300,
        use_dns_cache=True,
        keepalive_timeout=30,
        enable_cleanup_closed=True,
    )
    session = aiohttp.ClientSession(
        connector=connector,
        timeout=aiohttp.ClientTimeout(total=30, connect=10)
    )
    bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'), session=session)
    return bot, session

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command('start'))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üç∏ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data="recipe"),
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="search")
        ],
        [
            InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω—ã–π", callback_data="random"),
            InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="menu")
        ],
        [
            InlineKeyboardButton(text="üçÇ –°–µ–∑–æ–Ω–Ω—ã–µ", callback_data="seasonal"),
            InlineKeyboardButton(text="üçΩÔ∏è –§—É–¥–ø–µ–π—Ä–∏–Ω–≥", callback_data="pairing")
        ],
        [
            InlineKeyboardButton(text="üìà –¢—Ä–µ–Ω–¥—ã", callback_data="trends"),
            InlineKeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="news")
        ],
        [
            InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data="create_recipe"),
            InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ])
    
    welcome_text = """
üçπ MixMatrixBot - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–∞—Ä–º–µ–Ω!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∫–æ–∫—Ç–µ–π–ª–µ–π! –Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞
‚Ä¢ –ù–∞–π—Ç–∏ –∫–æ–∫—Ç–µ–π–ª–∏ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º –∏ —Å–µ–∑–æ–Ω—É
‚Ä¢ –ü–æ–¥–æ–±—Ä–∞—Ç—å –∫–æ–∫—Ç–µ–π–ª—å –ø–æ–¥ –≤–∞—à–µ –±–ª—é–¥–æ
‚Ä¢ –£–∑–Ω–∞—Ç—å –æ —Ç—Ä–µ–Ω–¥–∞—Ö –∏ –Ω–æ–≤–æ—Å—Ç—è—Ö –∏–Ω–¥—É—Å—Ç—Ä–∏–∏

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/recipe - —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç
/search - –ø–æ–∏—Å–∫ –∫–æ–∫—Ç–µ–π–ª–µ–π
/random - —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å
/seasonal - —Å–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏
/pairing - –ø–æ–¥–±–æ—Ä –ø–æ–¥ –±–ª—é–¥–æ
/create_recipe - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã!
    """
    
    await message.reply(welcome_text, reply_markup=keyboard)

@dp.message(Command('help'))
async def help_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üçπ MixMatrixBot - –°–ø—Ä–∞–≤–∫–∞

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–∏—Å–∫:
/recipe [—Å–ø–∏—Ä—Ç] [mocktail=yes/no] - —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç
/search [–∑–∞–ø—Ä–æ—Å] - –ø–æ–∏—Å–∫ –∫–æ–∫—Ç–µ–π–ª–µ–π
/random - —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å
/create_recipe - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç —Å AI

–°–µ–∑–æ–Ω–Ω—ã–µ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ:
/seasonal - —Å–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏ –¥–ª—è –†–æ—Å—Å–∏–∏
/pairing [–±–ª—é–¥–æ] - –ø–æ–¥–±–æ—Ä –∫–æ–∫—Ç–µ–π–ª—è –ø–æ–¥ –±–ª—é–¥–æ
/menu [—Ç–∏–ø] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
/trends - —Ç—Ä–µ–Ω–¥—ã –∫–æ–∫—Ç–µ–π–ª–µ–π 2025
/news - –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ HoReCa
/history [–∫–æ–∫—Ç–µ–π–ª—å] - –∏—Å—Ç–æ—Ä–∏—è –∫–æ–∫—Ç–µ–π–ª—è

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏—Ä—Ç—ã:
–¥–∂–∏–Ω, –≤–æ–¥–∫–∞, —Ä–æ–º, –≤–∏—Å–∫–∏, —Ç–µ–∫–∏–ª–∞, –∫–æ–Ω—å—è–∫, –±—Ä–µ–Ω–¥–∏

–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (–†–æ—Å—Å–∏—è):
‚Ä¢ –ó–∏–º–∞: –∫–ª—é–∫–≤–∞, –±—Ä—É—Å–Ω–∏–∫–∞, —Ü–∏—Ç—Ä—É—Å—ã, –∫–æ—Ä–∏—Ü–∞
‚Ä¢ –í–µ—Å–Ω–∞: —Ä–µ–≤–µ–Ω—å, —â–∞–≤–µ–ª—å, –º–æ–ª–æ–¥—ã–µ —Ç—Ä–∞–≤—ã
‚Ä¢ –õ–µ—Ç–æ: —è–≥–æ–¥—ã, –±–∞–∑–∏–ª–∏–∫, —É–∫—Ä–æ–ø
‚Ä¢ –û—Å–µ–Ω—å: —è–±–ª–æ–∫–∏, –≥—Ä—É—à–∏, —Ç—ã–∫–≤–∞, –º–µ–¥

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –§—É–¥–ø–µ–π—Ä–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ The Flavor Bible
‚Ä¢ –°–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –†–æ—Å—Å–∏–∏
‚Ä¢ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
‚Ä¢ –ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–µ –º–µ–Ω—é —Å –º–∞—Ç—Ä–∏—Ü–µ–π –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è
    """
    await message.reply(help_text)

@dp.message(Command('search'))
async def search_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if not args:
        await message.reply("üîç –ü–æ–∏—Å–∫ –∫–æ–∫—Ç–µ–π–ª–µ–π\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è –∏–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ –ú–∞—Ä—Ç–∏–Ω–∏\n‚Ä¢ –¥–∂–∏–Ω\n‚Ä¢ —Ç–µ–∫–∏–ª–∞\n‚Ä¢ –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π")
        return
    
    query = ' '.join(args)
    await message.reply(f"üîç –ò—â—É —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
    
    try:
        recipes = db.search_recipes(query)
        
        if not recipes:
            await message.reply("–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç —Å –ø–æ–º–æ—â—å—é /recipe")
            return
        
        response = f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {len(recipes)}\n\n"
        
        for i, recipe in enumerate(recipes[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Ä–µ—Ü–µ–ø—Ç–æ–≤
            response += f"{i}. {recipe['name']}\n"
            response += f"–ë–∞–∑–æ–≤—ã–π —Å–ø–∏—Ä—Ç: {recipe['base_spirit']}\n"
            response += f"–û–ø–∏—Å–∞–Ω–∏–µ: {recipe['description'][:100]}...\n\n"
        
        if len(recipes) > 5:
            response += f"... –∏ –µ—â–µ {len(recipes) - 5} —Ä–µ—Ü–µ–ø—Ç–æ–≤"
        
        await message.reply(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
@dp.callback_query(lambda c: c.data == 'recipe')
async def process_callback_recipe(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–µ—Ü–µ–ø—Ç'"""
    await callback_query.answer()
    await recipe_command(callback_query.message)

@dp.callback_query(lambda c: c.data == 'search')
async def process_callback_search(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∏—Å–∫'"""
    await callback_query.answer()
    await callback_query.message.reply("üîç –ü–æ–∏—Å–∫ –∫–æ–∫—Ç–µ–π–ª–µ–π\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è –∏–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ –ú–∞—Ä—Ç–∏–Ω–∏\n‚Ä¢ –¥–∂–∏–Ω\n‚Ä¢ —Ç–µ–∫–∏–ª–∞\n‚Ä¢ –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π")

@dp.callback_query(lambda c: c.data == 'random')
async def process_callback_random(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ª—É—á–∞–π–Ω—ã–π'"""
    await callback_query.answer()
    await callback_query.message.reply("üé≤ –°–ª—É—á–∞–π–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å\n\n–°–æ–∑–¥–∞—é –¥–ª—è –≤–∞—Å —Å—é—Ä–ø—Ä–∏–∑-–∫–æ–∫—Ç–µ–π–ª—å...")
    
    import random
    random_spirit = random.choice(['–¥–∂–∏–Ω', '–≤–æ–¥–∫–∞', '—Ä–æ–º', '–≤–∏—Å–∫–∏', '—Ç–µ–∫–∏–ª–∞', '–∫–æ–Ω—å—è–∫'])
    seasonal_ingredients = ['—è–±–ª–æ–∫–∏', '–≥—Ä—É—à–∏', '—Ç—ã–∫–≤–∞', '–º–µ–¥', '–æ—Ä–µ—Ö–∏']
    random_ingredients = random.sample(seasonal_ingredients, min(3, len(seasonal_ingredients)))
    
    prompt = f"""
–°–æ–∑–¥–∞–π –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∫–æ–∫—Ç–µ–π–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ:
- –ë–∞–∑–æ–≤—ã–π —Å–ø–∏—Ä—Ç: {random_spirit}
- –°–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {', '.join(random_ingredients)}
- –°–µ–∑–æ–Ω: –æ—Å–µ–Ω—å (–†–æ—Å—Å–∏—è)

–°–¥–µ–ª–∞–π –∫–æ–∫—Ç–µ–π–ª—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ –Ω–µ–æ–±—ã—á–Ω—ã–º, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è.
–í–∫–ª—é—á–∏:
1. –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
2. –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º–∏
3. –ú–µ—Ç–æ–¥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
4. –ü–æ–¥–∞—á–∞ –∏ —É–∫—Ä–∞—à–µ–Ω–∏–µ
5. –§–∏–ª–æ—Å–æ—Ñ–∏—é –∫–æ–∫—Ç–µ–π–ª—è
6. –°–æ–≤–µ—Ç—ã –ø–æ —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥—É

–ü—É—Å—Ç—å —ç—Ç–æ –±—É–¥–µ—Ç —Å—é—Ä–ø—Ä–∏–∑!
    """
    
    try:
        recipe = await call_yandex_api(prompt)
        await callback_query.message.reply(recipe)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
        await callback_query.message.reply(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.callback_query(lambda c: c.data == 'help')
async def process_callback_help(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
    await callback_query.answer()
    await help_command(callback_query.message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_text_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        response = await party_processor.process_request(message.text, message.from_user.id)
        await message.reply(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

async def run_bot_with_restart():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
    max_restarts = 5
    restart_count = 0
    
    while restart_count < max_restarts:
        try:
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ —Å–µ—Å—Å–∏—é
            bot, session = await create_bot()
            
            logger.info("üçπ –ó–∞–ø—É—Å–∫ MIXTRIX Bot...")
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –≥–æ—Ç–æ–≤–∞")
            logger.info("‚úÖ Yandex API: –ø–æ–¥–∫–ª—é—á–µ–Ω")
            logger.info("‚úÖ –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: –∞–∫—Ç–∏–≤–Ω–∞")
            logger.info("‚úÖ –§—É–Ω–∫—Ü–∏–∏ MIXTRIX: –∞–∫—Ç–∏–≤–Ω—ã")
            logger.info("üì± –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
            bot_info = await bot.get_me()
            logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username} ({bot_info.first_name})")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            await dp.start_polling(
                bot, 
                skip_updates=True,
                timeout=30,
                request_timeout=30,
                drop_pending_updates=True,
                allowed_updates=["message", "callback_query"],
                close_bot_session_on_shutdown=True
            )
            
        except Exception as e:
            restart_count += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {restart_count}/{max_restarts}): {e}")
            
            if restart_count < max_restarts:
                wait_time = min(30, 5 * restart_count)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(wait_time)
            else:
                logger.error("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
                break
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            try:
                if 'session' in locals():
                    await session.close()
            except:
                pass

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    await run_bot_with_restart()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
