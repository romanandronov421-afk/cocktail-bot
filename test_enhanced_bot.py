#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_enhanced_processor():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞"""
    try:
        from enhanced_foodpairing_processor import EnhancedFoodPairingProcessor
        
        print("üç∏ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞...")
        print("=" * 60)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        processor = EnhancedFoodPairingProcessor()
        
        print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–∫—É—Å–æ–≤—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {len(processor.flavor_combinations)}")
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {len(processor.recipe_database)}")
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–∞–≤–∏–ª —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞: {len(processor.food_pairing_rules)}")
        
        print("\n" + "=" * 60)
        print("üß™ –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ —Å —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–æ–º")
        print("=" * 60)
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞ —Å —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–æ–º
        recipe = await processor.generate_recipe_with_foodpairing(
            base_spirit="–¥–∂–∏–Ω",
            dish="—Å—Ç–µ–π–∫",
            mocktail=False,
            season="autumn"
        )
        
        print("üç∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç:")
        print("-" * 40)
        print(recipe)
        
        print("\n" + "=" * 60)
        print("üß™ –¢–µ—Å—Ç 2: –°–µ–∑–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        print("=" * 60)
        
        # –¢–µ—Å—Ç —Å–µ–∑–æ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommendations = processor.get_seasonal_recommendations("autumn")
        print("üçÇ –°–µ–∑–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("-" * 40)
        print(recommendations)
        
        print("\n" + "=" * 60)
        print("üß™ –¢–µ—Å—Ç 3: –í–∫—É—Å–æ–≤—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏")
        print("=" * 60)
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –¥–ª—è —Å–ø–∏—Ä—Ç–∞
        best_combinations = processor._get_best_combinations_for_spirit("–¥–∂–∏–Ω")
        print("üçΩÔ∏è –õ—É—á—à–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –¥–∂–∏–Ω–∞:")
        print("-" * 40)
        for i, combo in enumerate(best_combinations[:5], 1):
            ingredients_str = " + ".join(combo['ingredients'])
            print(f"{i}. {ingredients_str} - {combo['description']} (—Å–∏–ª–∞: {combo['strength']}/5)")
        
        print("\n" + "=" * 60)
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("=" * 60)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_bot_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º"""
    try:
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º...")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        from database import CocktailDatabase
        from hybrid_processor import HybridCocktailProcessor
        from cocktail_party_processor import CocktailPartyProcessor
        from enhanced_foodpairing_processor import EnhancedFoodPairingProcessor
        
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = CocktailDatabase()
        recipes = db.get_all_recipes()
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {len(recipes)} —Ä–µ—Ü–µ–ø—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        hybrid_processor = HybridCocktailProcessor()
        print("‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–∫—Ç–µ–π–ª—å–Ω–æ–π –≤–µ—á–µ—Ä–∏–Ω–∫–∏
        party_processor = CocktailPartyProcessor()
        print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–∫—Ç–µ–π–ª—å–Ω–æ–π –≤–µ—á–µ—Ä–∏–Ω–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞
        enhanced_processor = EnhancedFoodPairingProcessor()
        print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        print("\nüéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–æ—Ç–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ MIXTRIXüç∏")
    print("=" * 80)
    
    # –¢–µ—Å—Ç 1: –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞
    test1_success = await test_enhanced_processor()
    
    # –¢–µ—Å—Ç 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–æ—Ç–æ–º
    test2_success = await test_bot_integration()
    
    print("\n" + "=" * 80)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 80)
    
    if test1_success:
        print("‚úÖ –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞: –ü–†–û–ô–î–ï–ù")
    else:
        print("‚ùå –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞: –ü–†–û–í–ê–õ–ï–ù")
    
    if test2_success:
        print("‚úÖ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º: –ü–†–û–ô–î–ï–ù")
    else:
        print("‚ùå –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º: –ü–†–û–í–ê–õ–ï–ù")
    
    if test1_success and test2_success:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üç∏ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞!")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
    
    print("=" * 80)

if __name__ == "__main__":
    asyncio.run(main())






