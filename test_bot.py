#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ MIXTRIX
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_bot_commands():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    
    print("üç∏ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ MIXTRIX")
    print("=" * 40)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
    try:
        from main import dp, bot
        print("‚úÖ –ú–æ–¥—É–ª–∏ –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π: {e}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        import sqlite3
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM recipes")
        total = cursor.fetchone()[0]
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {total} —Ä–µ—Ü–µ–ø—Ç–æ–≤")
        conn.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        import configparser
        config = configparser.ConfigParser()
        config.read('config.ini')
        
        if 'YandexGPT' in config:
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è YandexGPT –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è YandexGPT –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    try:
        from dotenv import load_dotenv
        load_dotenv('env_file.txt')
        
        api_key = os.getenv('YANDEX_API_KEY')
        folder_id = os.getenv('FOLDER_ID')
        
        if api_key and folder_id:
            print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        else:
            print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
        return
    
    print("\nüéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    commands = [
        "/start", "/help", "/rules", "/examples",
        "/classic", "/signature", "/premix",
        "/iba", "/iba_classic", "/bible", "/aperitif",
        "/theory", "/preparation", "/techniques", "/syrups",
        "/extended", "/molecular", "/scientific",
        "/liquid_intelligence", "/flavor_principles",
        "/flavor_combinations", "/seasonal_pairings",
        "/cocktail_pairings", "/el_copitas"
    ]
    
    for i, cmd in enumerate(commands, 1):
        print(f"  {i:2d}. {cmd}")
    
    print(f"\nüìä –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {len(commands)}")
    print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    try:
        handlers_count = len(dp._handlers)
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {handlers_count}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")

def test_database_queries():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
    print("=" * 40)
    
    try:
        import sqlite3
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        
        # –¢–µ—Å—Ç 1: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        cursor.execute("SELECT COUNT(*) FROM recipes")
        total = cursor.fetchone()[0]
        print(f"‚úÖ –í—Å–µ–≥–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {total}")
        
        # –¢–µ—Å—Ç 2: –†–µ—Ü–µ–ø—Ç—ã –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        cursor.execute("SELECT source, COUNT(*) FROM recipes GROUP BY source ORDER BY COUNT(*) DESC")
        sources = cursor.fetchall()
        print("‚úÖ –†–µ—Ü–µ–ø—Ç—ã –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
        for source, count in sources:
            print(f"    ‚Ä¢ {source}: {count}")
        
        # –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º
        test_ingredients = ["—Ç–µ–∫–∏–ª–∞", "–¥–∂–∏–Ω", "—Ä–æ–º", "—Ñ–µ–π—Ö–æ–∞"]
        print("‚úÖ –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º:")
        for ingredient in test_ingredients:
            cursor.execute("SELECT COUNT(*) FROM recipes WHERE ingredients LIKE ?", (f"%{ingredient}%",))
            count = cursor.fetchone()[0]
            print(f"    ‚Ä¢ {ingredient}: {count} —Ä–µ—Ü–µ–ø—Ç–æ–≤")
        
        # –¢–µ—Å—Ç 4: –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        cursor.execute("SELECT category, COUNT(*) FROM recipes GROUP BY category ORDER BY COUNT(*) DESC LIMIT 5")
        categories = cursor.fetchall()
        print("‚úÖ –¢–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π:")
        for category, count in categories:
            print(f"    ‚Ä¢ {category}: {count}")
        
        conn.close()
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == "__main__":
    print("üç∏ MIXTRIX - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    test_database_queries()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    asyncio.run(test_bot_commands())
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ Telegram!")

