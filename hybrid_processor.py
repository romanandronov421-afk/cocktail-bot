#!/usr/bin/env python3
"""
–ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è MixMatrixBot
–ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏ Yandex API –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏–π
"""

import os
import re
import json
import requests
from typing import Dict, List, Optional, Tuple
from dotenv import load_dotenv
from database import CocktailDatabase

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('env_file.txt')

class HybridCocktailProcessor:
    """–ì–∏–±—Ä–∏–¥–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –∫–æ–∫—Ç–µ–π–ª—è—Ö"""
    
    def __init__(self):
        self.db = CocktailDatabase()
        self.yandex_api_key = os.getenv('YANDEX_API_KEY')
        self.yandex_folder_id = os.getenv('FOLDER_ID')
        self.yandex_api_url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        self.alcohol_keywords = [
            '–∞–ª–∫–æ–≥–æ–ª—å', '—Å–ø–∏—Ä—Ç', '–¥–∂–∏–Ω', '–≤–æ–¥–∫–∞', '—Ä–æ–º', '–≤–∏—Å–∫–∏', '—Ç–µ–∫–∏–ª–∞', 
            '–∫–æ–Ω—å—è–∫', '–±—Ä–µ–Ω–¥–∏', '–ª–∏–∫–µ—Ä', '–≤–µ—Ä–º—É—Ç', '—à–∞–º–ø–∞–Ω—Å–∫–æ–µ', '–≤–∏–Ω–æ',
            '–∫–æ–∫—Ç–µ–π–ª—å', '–º–∞—Ä—Ç–∏–Ω–∏', '–¥–∂–∏–Ω-—Ç–æ–Ω–∏–∫', '–º–æ—Ö–∏—Ç–æ', '–∫–æ—Å–º–æ–ø–æ–ª–∏—Ç–µ–Ω',
            '–∫—Ä–æ–≤–∞–≤–∞—è –º—ç—Ä–∏', '–ø–∏–Ω–∞ –∫–æ–ª–∞–¥–∞', '–º–∞–π —Ç–∞–π', '–ª–æ–Ω–≥ –∞–π–ª–µ–Ω–¥'
        ]
        
        self.educational_keywords = [
            '—á—Ç–æ —Ç–∞–∫–æ–µ', '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ', '–∏—Å—Ç–æ—Ä–∏—è', '–∫–∞–∫ –¥–µ–ª–∞—é—Ç', '—Ç–µ—Ö–Ω–∏–∫–∞',
            '–º–∏–∫—Å–æ–ª–æ–≥–∏—è', '–±–∞—Ä–º–µ–Ω', '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '–∫—É–ª—å—Ç—É—Ä–∞', '—Ç—Ä–∞–¥–∏—Ü–∏—è',
            '–ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ', '—ç—Ç–∏–º–æ–ª–æ–≥–∏—è', '–∑–Ω–∞—á–µ–Ω–∏–µ', '—Å–∏–º–≤–æ–ª–∏–∫–∞'
        ]
        
        self.non_alcohol_keywords = [
            '–±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π', '–º–æ–∫—Ç–µ–π–ª—å', '–¥–µ—Ç—Å–∫–∏–π', '–±–µ–∑ —Å–ø–∏—Ä—Ç–∞',
            '–ª–∏–º–æ–Ω–∞–¥', '–º–æ—Ä—Å', '–∫–æ–º–ø–æ—Ç', '—Å–æ–∫', '–≤–æ–¥–∞'
        ]
    
    def analyze_request(self, user_message: str) -> Dict[str, any]:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        message_lower = user_message.lower()
        
        analysis = {
            'is_alcohol_related': False,
            'is_educational': False,
            'is_recipe_request': False,
            'is_non_alcohol': False,
            'spirit_type': None,
            'cocktail_name': None,
            'confidence': 0.0
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        alcohol_matches = sum(1 for keyword in self.alcohol_keywords if keyword in message_lower)
        if alcohol_matches > 0:
            analysis['is_alcohol_related'] = True
            analysis['confidence'] += alcohol_matches * 0.3
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        educational_matches = sum(1 for keyword in self.educational_keywords if keyword in message_lower)
        if educational_matches > 0:
            analysis['is_educational'] = True
            analysis['confidence'] += educational_matches * 0.2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã —Ä–µ—Ü–µ–ø—Ç–æ–≤
        recipe_patterns = [
            r'—Ä–µ—Ü–µ–ø—Ç\s+(\w+)',
            r'–∫–∞–∫\s+—Å–¥–µ–ª–∞—Ç—å\s+(\w+)',
            r'–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å\s+(\w+)',
            r'—Å–æ–∑–¥–∞—Ç—å\s+(\w+)'
        ]
        
        for pattern in recipe_patterns:
            match = re.search(pattern, message_lower)
            if match:
                analysis['is_recipe_request'] = True
                analysis['cocktail_name'] = match.group(1)
                analysis['confidence'] += 0.4
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        non_alcohol_matches = sum(1 for keyword in self.non_alcohol_keywords if keyword in message_lower)
        if non_alcohol_matches > 0:
            analysis['is_non_alcohol'] = True
            analysis['confidence'] += non_alcohol_matches * 0.3
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–ø–∏—Ä—Ç–∞
        for spirit in ['–¥–∂–∏–Ω', '–≤–æ–¥–∫–∞', '—Ä–æ–º', '–≤–∏—Å–∫–∏', '—Ç–µ–∫–∏–ª–∞', '–∫–æ–Ω—å—è–∫', '–±—Ä–µ–Ω–¥–∏']:
            if spirit in message_lower:
                analysis['spirit_type'] = spirit
                break
        
        return analysis
    
    async def call_yandex_api(self, prompt: str, system_prompt: str = "") -> str:
        """–í—ã–∑–æ–≤ Yandex API –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        headers = {
            "Authorization": f"Api-Key {self.yandex_api_key}",
            "Content-Type": "application/json"
        }
        
        messages = []
        if system_prompt:
            messages.append({"role": "system", "text": system_prompt})
        messages.append({"role": "user", "text": prompt})
        
        data = {
            "modelUri": f"gpt://{self.yandex_folder_id}/yandexgpt",
            "completionOptions": {
                "stream": False,
                "temperature": 0.7,
                "maxTokens": 500
            },
            "messages": messages
        }
        
        try:
            response = requests.post(self.yandex_api_url, headers=headers, json=data, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                return result.get('result', {}).get('alternatives', [{}])[0].get('message', {}).get('text', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞')
            else:
                return f"–û—à–∏–±–∫–∞ API: {response.status_code}"
                
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e}"
    
    def search_cocktail_in_db(self, cocktail_name: str) -> Optional[Dict]:
        """–ü–æ–∏—Å–∫ –∫–æ–∫—Ç–µ–π–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            recipes = self.db.get_all_recipes()
            cocktail_name_lower = cocktail_name.lower()
            
            for recipe in recipes:
                if cocktail_name_lower in recipe['name'].lower():
                    return recipe
            
            # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
            for recipe in recipes:
                if any(word in recipe['name'].lower() for word in cocktail_name_lower.split()):
                    return recipe
            
            return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –ë–î: {e}")
            return None
    
    def format_cocktail_recipe(self, recipe: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –∫–æ–∫—Ç–µ–π–ª—è"""
        ingredients = json.loads(recipe['ingredients']) if isinstance(recipe['ingredients'], str) else recipe['ingredients']
        
        formatted_recipe = f"üç∏ **{recipe['name']}**\n\n"
        
        if recipe.get('description'):
            formatted_recipe += f"üìù {recipe['description']}\n\n"
        
        formatted_recipe += "ü•É **–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**\n"
        for ingredient, amount in ingredients.items():
            formatted_recipe += f"‚Ä¢ {ingredient}: {amount}\n"
        
        formatted_recipe += f"\nüîß **–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:**\n{recipe['method']}\n"
        
        if recipe.get('garnish'):
            formatted_recipe += f"\nüçí **–ì–∞—Ä–Ω–∏—Ä:** {recipe['garnish']}\n"
        
        if recipe.get('glass_type'):
            formatted_recipe += f"\nü•õ **–ü–æ—Å—É–¥–∞:** {recipe['glass_type']}\n"
        
        if recipe.get('history'):
            formatted_recipe += f"\nüìö **–ò—Å—Ç–æ—Ä–∏—è:** {recipe['history']}\n"
        
        return formatted_recipe
    
    async def process_request(self, user_message: str) -> str:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        analysis = self.analyze_request(user_message)
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å –∞–ª–∫–æ–≥–æ–ª–µ–º –∏–ª–∏ —ç—Ç–æ –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if analysis['is_non_alcohol'] or not analysis['is_alcohol_related']:
            if analysis['is_educational']:
                # –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ API
                system_prompt = "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞–ø–∏—Ç–∫–∞–º –∏ –∫—É–ª–∏–Ω–∞—Ä–∏–∏. –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –æ–± –∏—Å—Ç–æ—Ä–∏–∏, —Ç—Ä–∞–¥–∏—Ü–∏—è—Ö –∏ –∫—É–ª—å—Ç—É—Ä–µ –Ω–∞–ø–∏—Ç–∫–æ–≤."
                response = await self.call_yandex_api(user_message, system_prompt)
                return f"üìö **–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:**\n\n{response}"
            else:
                # –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ API
                response = await self.call_yandex_api(user_message)
                return response
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å —Ä–µ—Ü–µ–ø—Ç–∞ –∞–ª–∫–æ–≥–æ–ª—å–Ω–æ–≥–æ –∫–æ–∫—Ç–µ–π–ª—è
        if analysis['is_recipe_request'] and analysis['is_alcohol_related']:
            cocktail_name = analysis['cocktail_name']
            
            # –ò—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            recipe = self.search_cocktail_in_db(cocktail_name)
            if recipe:
                return self.format_cocktail_recipe(recipe)
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
                system_prompt = "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–±–∞—Ä–º–µ–Ω. –†–∞—Å—Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º –∫–æ–∫—Ç–µ–π–ª–µ, –µ–≥–æ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö, –Ω–æ –Ω–µ –¥–∞–≤–∞–π —Ç–æ—á–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç —Å –∞–ª–∫–æ–≥–æ–ª–µ–º."
                response = await self.call_yandex_api(f"–†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–æ–∫—Ç–µ–π–ª–µ {cocktail_name}", system_prompt)
                return f"üç∏ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–∫—Ç–µ–π–ª–µ {cocktail_name.title()}:**\n\n{response}\n\nüí° *–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –±–∞—Ä–º–µ–Ω—É*"
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ–± –∞–ª–∫–æ–≥–æ–ª–µ
        if analysis['is_educational'] and analysis['is_alcohol_related']:
            system_prompt = "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∫—É–ª—å—Ç—É—Ä–µ –Ω–∞–ø–∏—Ç–∫–æ–≤. –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –æ–± –∏—Å—Ç–æ—Ä–∏–∏, —Ç—Ä–∞–¥–∏—Ü–∏—è—Ö, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –∏ –∫—É–ª—å—Ç—É—Ä–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞–ø–∏—Ç–∫–æ–≤."
            response = await self.call_yandex_api(user_message, system_prompt)
            return f"üìö **–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:**\n\n{response}"
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å –æ–± –∞–ª–∫–æ–≥–æ–ª–µ
        if analysis['is_alcohol_related']:
            system_prompt = "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞–ø–∏—Ç–∫–∞–º. –†–∞—Å—Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º –Ω–∞–ø–∏—Ç–∫–µ, –µ–≥–æ –∏—Å—Ç–æ—Ä–∏–∏, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö –∏ –∫—É–ª—å—Ç—É—Ä–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏."
            response = await self.call_yandex_api(user_message, system_prompt)
            return f"üç∏ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø–∏—Ç–∫–µ:**\n\n{response}"
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º API
        response = await self.call_yandex_api(user_message)
        return response

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def test_hybrid_processor():
    """–¢–µ—Å—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    processor = HybridCocktailProcessor()
    
    test_requests = [
        "–†–∞—Å—Å–∫–∞–∂–∏ —Ä–µ—Ü–µ–ø—Ç –º–∞—Ä—Ç–∏–Ω–∏",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∏–∫—Å–æ–ª–æ–≥–∏—è?",
        "–ò—Å—Ç–æ—Ä–∏—è –¥–∂–∏–Ω–∞",
        "–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –ª–∏–º–æ–Ω–∞–¥?",
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–æ–∫—Ç–µ–π–ª–µ –∫–æ—Å–º–æ–ø–æ–ª–∏—Ç–µ–Ω",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–∂–∏–Ω-—Ç–æ–Ω–∏–∫?"
    ]
    
    for request in test_requests:
        print(f"\nüìù –ó–∞–ø—Ä–æ—Å: {request}")
        print("-" * 50)
        response = await processor.process_request(request)
        print(response)
        print("-" * 50)

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_hybrid_processor())












