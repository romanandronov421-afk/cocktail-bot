#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Yandex Cloud AI API
"""

import os
import requests
import json
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_yandex_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Yandex Cloud AI API"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Yandex Cloud AI API...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = os.getenv('YANDEX_API_KEY')
    folder_id = os.getenv('FOLDER_ID')
    
    if not api_key or not folder_id:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã YANDEX_API_KEY –∏–ª–∏ FOLDER_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    print(f"‚úÖ API Key: {api_key[:10]}...")
    print(f"‚úÖ Folder ID: {folder_id}")
    
    # URL –¥–ª—è Yandex Cloud AI
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    
    headers = {
        "Authorization": f"Api-Key {api_key}",
        "Content-Type": "application/json"
    }
    
    data = {
        "modelUri": f"gpt://{folder_id}/yandexgpt",
        "completionOptions": {
            "stream": False,
            "temperature": 0.7,
            "maxTokens": 100
        },
        "messages": [
            {
                "role": "user",
                "text": "–ü—Ä–∏–≤–µ—Ç! –°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π —Ä–µ—Ü–µ–ø—Ç –∫–æ–∫—Ç–µ–π–ª—è —Å –¥–∂–∏–Ω–æ–º."
            }
        ]
    }
    
    try:
        print("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Yandex API...")
        response = requests.post(url, headers=headers, json=data)
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print("üìù –û—Ç–≤–µ—Ç:")
            print(result.get('result', {}).get('alternatives', [{}])[0].get('message', {}).get('text', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'))
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üçπ MixMatrixBot - –¢–µ—Å—Ç Yandex API")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ .env
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("YANDEX_API_KEY=ajegpjgsbgidg7av4mfj")
        print("FOLDER_ID=ajels2ea51569prr6uvb")
        print("TELEGRAM_BOT_TOKEN=–≤–∞—à_telegram_—Ç–æ–∫–µ–Ω")
        print("XAI_API_KEY=–≤–∞—à_xai_–∫–ª—é—á")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    if test_yandex_api():
        print("\nüéâ Yandex API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å Yandex API")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

if __name__ == "__main__":
    main()



