#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "–ö–æ–∫—Ç–µ–π–ª—å–Ω–∞—è –≤–µ—á–µ—Ä–∏–Ω–∫–∞"
"""

import re
import json
from typing import Dict, List, Optional
from cocktail_party_db import CocktailPartyDatabase
from yandex_ai_gateway import YandexAIService

class CocktailPartyProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π MIXTRIX"""
    
    def __init__(self):
        self.db = CocktailPartyDatabase()
        self.yandex_service = YandexAIService()
    
    async def process_request(self, user_message: str, user_id: int = 1) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        request_type = self._identify_request_type(user_message)
        
        if request_type == "add_ingredient":
            return await self._handle_add_ingredient(user_message, user_id)
        elif request_type == "show_my_bar":
            return await self._handle_show_bar(user_id)
        elif request_type == "find_cocktails":
            return await self._handle_find_cocktails(user_id)
        elif request_type == "rate_cocktail":
            return await self._handle_rate_cocktail(user_message, user_id)
        elif request_type == "add_favorite":
            return await self._handle_add_favorite(user_message, user_id)
        elif request_type == "show_favorites":
            return await self._handle_show_favorites(user_id)
        elif request_type == "create_recipe":
            return await self._handle_create_recipe(user_message, user_id)
        elif request_type == "show_custom_recipes":
            return await self._handle_show_custom_recipes(user_id)
        elif request_type == "create_collection":
            return await self._handle_create_collection(user_message, user_id)
        elif request_type == "show_collections":
            return await self._handle_show_collections(user_id)
        elif request_type == "advanced_search":
            return await self._handle_advanced_search(user_message)
        elif request_type == "show_catalog":
            return await self._handle_show_catalog(user_message)
        elif request_type == "help":
            return await self._handle_help()
        else:
            # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ–∫—Ç–µ–π–ª—è
            return await self._handle_cocktail_search(user_message)
    
    def _identify_request_type(self, message: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        message_lower = message.lower()
        
        if any(word in message_lower for word in ["–¥–æ–±–∞–≤—å", "–µ—Å—Ç—å", "–∫—É–ø–∏–ª", "–ø—Ä–∏–æ–±—Ä—ë–ª"]):
            return "add_ingredient"
        elif any(word in message_lower for word in ["–º–æ–π –±–∞—Ä", "—á—Ç–æ –µ—Å—Ç—å", "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"]):
            return "show_my_bar"
        elif any(word in message_lower for word in ["—á—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å", "–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å", "–¥–æ—Å—Ç—É–ø–Ω—ã–µ"]):
            return "find_cocktails"
        elif any(word in message_lower for word in ["–æ—Ü–µ–Ω–∏", "—Ä–µ–π—Ç–∏–Ω–≥", "–∑–≤–µ–∑–¥"]):
            return "rate_cocktail"
        elif any(word in message_lower for word in ["–∏–∑–±—Ä–∞–Ω–Ω–æ–µ", "—Å–æ—Ö—Ä–∞–Ω–∏", "–ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è"]):
            return "add_favorite"
        elif any(word in message_lower for word in ["–º–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ", "–ª—é–±–∏–º—ã–µ"]):
            return "show_favorites"
        elif any(word in message_lower for word in ["—Å–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç", "–º–æ–π —Ä–µ—Ü–µ–ø—Ç", "–¥–æ–±–∞–≤—å —Ä–µ—Ü–µ–ø—Ç"]):
            return "create_recipe"
        elif any(word in message_lower for word in ["–º–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã", "—Å–æ–∑–¥–∞–Ω–Ω—ã–µ"]):
            return "show_custom_recipes"
        elif any(word in message_lower for word in ["–ø–æ–¥–±–æ—Ä–∫–∞", "–∫–æ–ª–ª–µ–∫—Ü–∏—è", "—Å–æ–∑–¥–∞–π –ø–æ–¥–±–æ—Ä–∫—É"]):
            return "create_collection"
        elif any(word in message_lower for word in ["–º–æ–∏ –ø–æ–¥–±–æ—Ä–∫–∏", "–∫–æ–ª–ª–µ–∫—Ü–∏–∏"]):
            return "show_collections"
        elif any(word in message_lower for word in ["–ø–æ–∏—Å–∫", "—Ñ–∏–ª—å—Ç—Ä", "–Ω–∞–π–¥–∏ –ø–æ"]):
            return "advanced_search"
        elif any(word in message_lower for word in ["–∫–∞—Ç–∞–ª–æ–≥", "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", "—Å–ø–∏—Å–æ–∫"]):
            return "show_catalog"
        elif any(word in message_lower for word in ["–ø–æ–º–æ—â—å", "–∫–æ–º–∞–Ω–¥—ã", "—á—Ç–æ —É–º–µ–µ—à—å"]):
            return "help"
        else:
            return "cocktail_search"
    
    async def _handle_add_ingredient(self, message: str, user_id: int) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –≤ –±–∞—Ä"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
        ingredient_match = re.search(r'(?:–¥–æ–±–∞–≤—å|–µ—Å—Ç—å|–∫—É–ø–∏–ª|–ø—Ä–∏–æ–±—Ä—ë–ª)\s+(.+)', message.lower())
        if not ingredient_match:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: '–î–æ–±–∞–≤—å –≤–æ–¥–∫—É' –∏–ª–∏ '–ï—Å—Ç—å –¥–∂–∏–Ω'"
        
        ingredient_name = ingredient_match.group(1).strip()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = self._determine_ingredient_category(ingredient_name)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
        success = self.db.add_user_ingredient(user_id, ingredient_name, category)
        
        if success:
            return f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: *{ingredient_name.title()}*\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∫–æ–∫—Ç–µ–π–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑ –≤–∞—à–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤!"
        else:
            return "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞"
    
    async def _handle_show_bar(self, user_id: int) -> str:
        """–ü–æ–∫–∞–∑ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        ingredients = self.db.get_user_ingredients(user_id)
        
        if not ingredients:
            return "üçπ *–í–∞—à –±–∞—Ä –ø—É—Å—Ç*\n\n–î–æ–±–∞–≤—å—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π:\n‚Ä¢ '–î–æ–±–∞–≤—å –≤–æ–¥–∫—É'\n‚Ä¢ '–ï—Å—Ç—å –¥–∂–∏–Ω'\n‚Ä¢ '–ö—É–ø–∏–ª —Ç–µ–∫–∏–ª—É'"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for ing in ingredients:
            cat = ing['category']
            if cat not in categories:
                categories[cat] = []
            categories[cat].append(ing)
        
        response = "üçπ *–í–∞—à –±–∞—Ä:*\n\n"
        
        for category, items in categories.items():
            response += f"üìÇ *{category.replace('_', ' ').title()}:*\n"
            for item in items:
                amount_info = f" ({item['amount']} {item['unit']})" if item['amount'] else ""
                response += f"‚Ä¢ {item['name'].title()}{amount_info}\n"
            response += "\n"
        
        response += "üí° *–ö–æ–º–∞–Ω–¥—ã:*\n‚Ä¢ '–ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?' - –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏\n‚Ä¢ '–î–æ–±–∞–≤—å [–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç]' - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"
        
        return response
    
    async def _handle_find_cocktails(self, user_id: int) -> str:
        """–ü–æ–∏—Å–∫ –∫–æ–∫—Ç–µ–π–ª–µ–π –ø–æ –∏–º–µ—é—â–∏–º—Å—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º"""
        cocktails = self.db.find_cocktails_by_ingredients(user_id)
        
        if not cocktails:
            return "‚ùå *–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–∫—Ç–µ–π–ª–µ–π*\n\n–î–æ–±–∞–≤—å—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ –≤–∞—à –±–∞—Ä –∫–æ–º–∞–Ω–¥–æ–π '–î–æ–±–∞–≤—å [–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç]'"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –Ω–∞–∏–±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        top_cocktails = cocktails[:5]
        
        response = "üçπ *–ö–æ–∫—Ç–µ–π–ª–∏ –∏–∑ –≤–∞—à–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:*\n\n"
        
        for cocktail in top_cocktails:
            availability = cocktail['availability_percentage']
            missing = cocktail['missing_ingredients']
            
            response += f"ü•É *{cocktail['name']}*\n"
            response += f"üìä –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {availability:.0f}%\n"
            
            if missing:
                response += f"‚ùå –ù—É–∂–Ω–æ: {', '.join(missing[:3])}\n"
            
            if cocktail.get('description'):
                response += f"üìù {cocktail['description'][:100]}...\n"
            
            response += "\n"
        
        if len(cocktails) > 5:
            response += f"... –∏ –µ—â—ë {len(cocktails) - 5} –∫–æ–∫—Ç–µ–π–ª–µ–π\n"
        
        response += "üí° *–ö–æ–º–∞–Ω–¥—ã:*\n‚Ä¢ '–û—Ü–µ–Ω–∏ [–∫–æ–∫—Ç–µ–π–ª—å] 5 –∑–≤—ë–∑–¥' - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É\n‚Ä¢ '–°–æ—Ö—Ä–∞–Ω–∏ [–∫–æ–∫—Ç–µ–π–ª—å]' - –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
        
        return response
    
    async def _handle_rate_cocktail(self, message: str, user_id: int) -> str:
        """–û—Ü–µ–Ω–∫–∞ –∫–æ–∫—Ç–µ–π–ª—è"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è –∏ –æ—Ü–µ–Ω–∫—É
        rating_match = re.search(r'–æ—Ü–µ–Ω–∏\s+(.+?)\s+(\d+)\s*–∑–≤–µ–∑–¥', message.lower())
        if not rating_match:
            return "‚ùå –§–æ—Ä–º–∞—Ç: '–û—Ü–µ–Ω–∏ –ú–∞—Ä—Ç–∏–Ω–∏ 5 –∑–≤—ë–∑–¥'"
        
        cocktail_name = rating_match.group(1).strip()
        rating = int(rating_match.group(2))
        
        if not 1 <= rating <= 5:
            return "‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5 –∑–≤—ë–∑–¥"
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–∫—Ç–µ–π–ª—å –≤ –±–∞–∑–µ
        cocktails = self.db.advanced_search({'name': cocktail_name})
        if not cocktails:
            return f"‚ùå –ö–æ–∫—Ç–µ–π–ª—å '{cocktail_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        cocktail = cocktails[0]
        success = self.db.rate_cocktail(user_id, cocktail['id'], rating)
        
        if success:
            return f"‚≠ê –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\nü•É *{cocktail['name']}*\n‚≠ê {rating}/5 –∑–≤—ë–∑–¥\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!"
        else:
            return "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏"
    
    async def _handle_add_favorite(self, message: str, user_id: int) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        cocktail_match = re.search(r'(?:—Å–æ—Ö—Ä–∞–Ω–∏|–¥–æ–±–∞–≤—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ)\s+(.+)', message.lower())
        if not cocktail_match:
            return "‚ùå –§–æ—Ä–º–∞—Ç: '–°–æ—Ö—Ä–∞–Ω–∏ –ú–∞—Ä—Ç–∏–Ω–∏' –∏–ª–∏ '–î–æ–±–∞–≤—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ù–µ–≥—Ä–æ–Ω–∏'"
        
        cocktail_name = cocktail_match.group(1).strip()
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–∫—Ç–µ–π–ª—å
        cocktails = self.db.advanced_search({'name': cocktail_name})
        if not cocktails:
            return f"‚ùå –ö–æ–∫—Ç–µ–π–ª—å '{cocktail_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        cocktail = cocktails[0]
        success = self.db.add_to_favorites(user_id, cocktail['id'])
        
        if success:
            return f"‚ù§Ô∏è *{cocktail['name']}* –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!\n\nüí° –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: '–ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ'"
        else:
            return "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
    
    async def _handle_show_favorites(self, user_id: int) -> str:
        """–ü–æ–∫–∞–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–∫—Ç–µ–π–ª–µ–π"""
        favorites = self.db.get_favorites(user_id)
        
        if not favorites:
            return "‚ù§Ô∏è *–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ*\n\n–î–æ–±–∞–≤—å—Ç–µ –∫–æ–∫—Ç–µ–π–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π:\n‚Ä¢ '–°–æ—Ö—Ä–∞–Ω–∏ –ú–∞—Ä—Ç–∏–Ω–∏'\n‚Ä¢ '–î–æ–±–∞–≤—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ù–µ–≥—Ä–æ–Ω–∏'"
        
        response = "‚ù§Ô∏è *–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏:*\n\n"
        
        for cocktail in favorites[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            response += f"ü•É *{cocktail['name']}*\n"
            if cocktail.get('description'):
                response += f"üìù {cocktail['description'][:80]}...\n"
            response += f"üç∏ –ë–∞–∑–∞: {cocktail['base_spirit']}\n\n"
        
        if len(favorites) > 10:
            response += f"... –∏ –µ—â—ë {len(favorites) - 10} –∫–æ–∫—Ç–µ–π–ª–µ–π\n"
        
        return response
    
    async def _handle_create_recipe(self, message: str, user_id: int) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞"""
        return "üçπ *–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞*\n\n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n\n```\n–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç:\n–ù–∞–∑–≤–∞–Ω–∏–µ: –ú–æ–π –∫–æ–∫—Ç–µ–π–ª—å\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n- –í–æ–¥–∫–∞ 50–º–ª\n- –õ–∞–π–º 20–º–ª\n- –°–∞—Ö–∞—Ä–Ω—ã–π —Å–∏—Ä–æ–ø 15–º–ª\n–ú–µ—Ç–æ–¥: –í—Å—Ç—Ä—è—Ö–Ω—É—Ç—å\n–û–ø–∏—Å–∞–Ω–∏–µ: –û—Å–≤–µ–∂–∞—é—â–∏–π –∫–æ–∫—Ç–µ–π–ª—å\n```"
    
    async def _handle_show_custom_recipes(self, user_id: int) -> str:
        """–ü–æ–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        recipes = self.db.get_custom_recipes(user_id)
        
        if not recipes:
            return "üë®‚Äçüç≥ *–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤*\n\n–°–æ–∑–¥–∞–π—Ç–µ —Ä–µ—Ü–µ–ø—Ç –∫–æ–º–∞–Ω–¥–æ–π '–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç'"
        
        response = "üë®‚Äçüç≥ *–í–∞—à–∏ —Ä–µ—Ü–µ–ø—Ç—ã:*\n\n"
        
        for recipe in recipes:
            response += f"ü•É *{recipe['name']}*\n"
            response += f"üìù {recipe['description'][:80]}...\n"
            response += f"‚è±Ô∏è –í—Ä–µ–º—è: {recipe['prep_time']}\n\n"
        
        return response
    
    async def _handle_create_collection(self, message: str, user_id: int) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–±–æ—Ä–∫–∏ –∫–æ–∫—Ç–µ–π–ª–µ–π"""
        return "üìö *–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–±–æ—Ä–∫–∏*\n\n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–±–æ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n\n```\n–°–æ–∑–¥–∞–π –ø–æ–¥–±–æ—Ä–∫—É:\n–ù–∞–∑–≤–∞–Ω–∏–µ: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∫–æ–∫—Ç–µ–π–ª–∏\n–û–ø–∏—Å–∞–Ω–∏–µ: –õ—É—á—à–∏–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã\n–ö–æ–∫—Ç–µ–π–ª–∏: –ú–∞—Ä—Ç–∏–Ω–∏, –ù–µ–≥—Ä–æ–Ω–∏, –ú–∞–Ω—Ö–µ—Ç—Ç–µ–Ω\n```"
    
    async def _handle_show_collections(self, user_id: int) -> str:
        """–ü–æ–∫–∞–∑ –ø–æ–¥–±–æ—Ä–æ–∫"""
        collections = self.db.get_collections(user_id)
        
        if not collections:
            return "üìö *–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–±–æ—Ä–æ–∫*\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–æ–¥–±–æ—Ä–∫—É –∫–æ–º–∞–Ω–¥–æ–π '–°–æ–∑–¥–∞–π –ø–æ–¥–±–æ—Ä–∫—É'"
        
        response = "üìö *–í–∞—à–∏ –ø–æ–¥–±–æ—Ä–∫–∏:*\n\n"
        
        for collection in collections:
            response += f"üìñ *{collection['name']}*\n"
            response += f"üìù {collection['description'][:80]}...\n"
            response += f"üçπ –ö–æ–∫—Ç–µ–π–ª–µ–π: {len(collection['cocktail_ids'])}\n\n"
        
        return response
    
    async def _handle_advanced_search(self, message: str) -> str:
        """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫"""
        filters = {}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if "–¥–∂–∏–Ω" in message.lower():
            filters['base_spirit'] = "–¥–∂–∏–Ω"
        elif "–≤–æ–¥–∫–∞" in message.lower():
            filters['base_spirit'] = "–≤–æ–¥–∫–∞"
        elif "—Ä–æ–º" in message.lower():
            filters['base_spirit'] = "—Ä–æ–º"
        elif "—Ç–µ–∫–∏–ª–∞" in message.lower():
            filters['base_spirit'] = "—Ç–µ–∫–∏–ª–∞"
        elif "–≤–∏—Å–∫–∏" in message.lower():
            filters['base_spirit'] = "–≤–∏—Å–∫–∏"
        
        if "–ª–µ–≥–∫–∏–π" in message.lower() or "–ø—Ä–æ—Å—Ç–æ–π" in message.lower():
            filters['difficulty'] = "easy"
        elif "—Å–ª–æ–∂–Ω—ã–π" in message.lower():
            filters['difficulty'] = "hard"
        
        cocktails = self.db.advanced_search(filters)
        
        if not cocktails:
            return "‚ùå *–ö–æ–∫—Ç–µ–π–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞"
        
        response = f"üîç *–ù–∞–π–¥–µ–Ω–æ {len(cocktails)} –∫–æ–∫—Ç–µ–π–ª–µ–π:*\n\n"
        
        for cocktail in cocktails[:5]:
            response += f"ü•É *{cocktail['name']}*\n"
            response += f"üç∏ –ë–∞–∑–∞: {cocktail['base_spirit']}\n"
            if cocktail.get('difficulty'):
                response += f"‚ö° –°–ª–æ–∂–Ω–æ—Å—Ç—å: {cocktail['difficulty']}\n"
            response += "\n"
        
        if len(cocktails) > 5:
            response += f"... –∏ –µ—â—ë {len(cocktails) - 5} –∫–æ–∫—Ç–µ–π–ª–µ–π\n"
        
        return response
    
    async def _handle_show_catalog(self, message: str) -> str:
        """–ü–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"""
        category = None
        
        if "–±–∞–∑–æ–≤—ã–µ" in message.lower():
            category = "base_spirits"
        elif "–ª–∏–∫—ë—Ä—ã" in message.lower():
            category = "liqueurs"
        elif "–º–∏–∫—Å–µ—Ä—ã" in message.lower():
            category = "mixers"
        elif "–¥–æ–±–∞–≤–∫–∏" in message.lower():
            category = "additives"
        
        ingredients = self.db.get_ingredient_catalog(category)
        
        if not ingredients:
            return "‚ùå *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for ing in ingredients:
            cat = ing['category']
            if cat not in categories:
                categories[cat] = []
            categories[cat].append(ing)
        
        response = "üì¶ *–ö–∞—Ç–∞–ª–æ–≥ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:*\n\n"
        
        for cat, items in categories.items():
            response += f"üìÇ *{cat.replace('_', ' ').title()}:*\n"
            for item in items[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                response += f"‚Ä¢ {item['name'].title()}"
                if item['substitutes']:
                    response += f" (–∑–∞–º–µ–Ω–∞: {', '.join(item['substitutes'][:2])})"
                response += "\n"
            if len(items) > 5:
                response += f"... –∏ –µ—â—ë {len(items) - 5}\n"
            response += "\n"
        
        return response
    
    async def _handle_help(self) -> str:
        """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        return """üçπ *MIXTRIX Bot*

*üè† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞—Ä–æ–º:*
‚Ä¢ '–î–æ–±–∞–≤—å –≤–æ–¥–∫—É' - –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
‚Ä¢ '–ú–æ–π –±–∞—Ä' - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
‚Ä¢ '–ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?' - –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏

*‚≠ê –û—Ü–µ–Ω–∫–∏ –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:*
‚Ä¢ '–û—Ü–µ–Ω–∏ –ú–∞—Ä—Ç–∏–Ω–∏ 5 –∑–≤—ë–∑–¥' - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É
‚Ä¢ '–°–æ—Ö—Ä–∞–Ω–∏ –ù–µ–≥—Ä–æ–Ω–∏' - –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
‚Ä¢ '–ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ' - –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ

*üë®‚Äçüç≥ –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:*
‚Ä¢ '–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç' - —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Ä–µ—Ü–µ–ø—Ç
‚Ä¢ '–ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã' - –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã

*üìö –ü–æ–¥–±–æ—Ä–∫–∏:*
‚Ä¢ '–°–æ–∑–¥–∞–π –ø–æ–¥–±–æ—Ä–∫—É' - —Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é
‚Ä¢ '–ú–æ–∏ –ø–æ–¥–±–æ—Ä–∫–∏' - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–±–æ—Ä–∫–∏

*üîç –ü–æ–∏—Å–∫:*
‚Ä¢ '–ü–æ–∏—Å–∫ –¥–∂–∏–Ω' - –Ω–∞–π—Ç–∏ –∫–æ–∫—Ç–µ–π–ª–∏ —Å –¥–∂–∏–Ω–æ–º
‚Ä¢ '–ö–∞—Ç–∞–ª–æ–≥ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤' - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
‚Ä¢ '–ü–æ–º–æ—â—å' - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*üí° –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ –æ –ª—é–±–æ–º –∫–æ–∫—Ç–µ–π–ª–µ!*"""
    
    async def _handle_cocktail_search(self, message: str) -> str:
        """–û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ–∫—Ç–µ–π–ª—è"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Yandex API –¥–ª—è –ø–æ–∏—Å–∫–∞
        try:
            response = await self.yandex_service.generate_response(message)
            return response
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"
    
    def _determine_ingredient_category(self, ingredient_name: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞"""
        name_lower = ingredient_name.lower()
        
        base_spirits = ["–≤–æ–¥–∫–∞", "–¥–∂–∏–Ω", "—Ä–æ–º", "–≤–∏—Å–∫–∏", "—Ç–µ–∫–∏–ª–∞", "–∫–æ–Ω—å—è–∫", "–±—Ä–µ–Ω–¥–∏"]
        liqueurs = ["–∫–∞–º–ø–∞—Ä–∏", "–∞–ø–µ—Ä–æ–ª—å", "–≤–µ—Ä–º—É—Ç", "—Ç—Ä–∏–ø–ª —Å–µ–∫", "–∫—É–∞–Ω—Ç—Ä–æ", "–∫—Ä–µ–º –¥–µ –∫–∞–∫–∞–æ"]
        mixers = ["—Å–æ–∫", "—Å–æ–¥–æ–≤–∞—è", "—Ç–æ–Ω–∏–∫", "–∫–æ–ª–∞", "—Å–ø—Ä–∞–π—Ç"]
        additives = ["—Å–∏—Ä–æ–ø", "–º–µ–¥", "—Å–æ–ª—å", "–ø–µ—Ä–µ—Ü", "–±–∏—Ç—Ç–µ—Ä—Å", "–º—è—Ç–∞", "–ª–∞–π–º", "–ª–∏–º–æ–Ω"]
        
        if any(spirit in name_lower for spirit in base_spirits):
            return "base_spirits"
        elif any(liqueur in name_lower for liqueur in liqueurs):
            return "liqueurs"
        elif any(mixer in name_lower for mixer in mixers):
            return "mixers"
        elif any(additive in name_lower for additive in additives):
            return "additives"
        else:
            return "other"
