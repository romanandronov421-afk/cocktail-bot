#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ –±–æ—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏ –≤—ã–∑—ã–≤–∞—é—Ç –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""

import inspect
import sys
from typing import Dict, List

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
try:
    import bot
except ImportError:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å bot.py")
    sys.exit(1)

# –í—Å–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
BUTTONS = {
    'recipe': 'üç∏ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç',
    'search': 'üîç –ü–æ–∏—Å–∫',
    'random': 'üé≤ –°–ª—É—á–∞–π–Ω—ã–π',
    'menu': 'üìã –ú–µ–Ω—é',
    'seasonal': 'üçÇ –°–µ–∑–æ–Ω–Ω—ã–µ',
    'pairing': 'üçΩÔ∏è –§—É–¥–ø–µ–π—Ä–∏–Ω–≥',
    'trends': 'üìà –¢—Ä–µ–Ω–¥—ã',
    'news': 'üì∞ –ù–æ–≤–æ—Å—Ç–∏',
    'create_recipe': '‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç',
    'help': '‚ÑπÔ∏è –ü–æ–º–æ—â—å'
}

def find_handler(callback_data: str) -> Dict:
    """–ù–∞–π—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_data"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –º–æ–¥—É–ª—è bot
    handlers = []
    for name, obj in inspect.getmembers(bot):
        if inspect.isfunction(obj):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
            if hasattr(obj, '__wrapped__'):
                handlers.append({
                    'name': name,
                    'func': obj,
                    'wrapped': obj.__wrapped__
                })
    
    # –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ @dp.callback_query()
    # –ù–æ –º—ã –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Ö –Ω–∞–ª–∏—á–∏–µ —á–µ—Ä–µ–∑ –∫–æ–¥
    
    return {'handlers': handlers}

def check_buttons():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫...\n")
    
    # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ bot.py
    try:
        with open('bot.py', 'r', encoding='utf-8') as f:
            code = f.read()
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª bot.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    results = {}
    
    for callback_data, button_name in BUTTONS.items():
        print(f"–ü—Ä–æ–≤–µ—Ä—è—é: {button_name} (callback_data='{callback_data}')")
        
        # –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –∫–æ–¥–µ
        pattern = f"@dp.callback_query.*callback_data.*==.*['\"]{callback_data}['\"]"
        import re
        
        # –ë–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫
        patterns = [
            f"callback_data.*==.*['\"]{callback_data}['\"]",
            f"c\\.data.*==.*['\"]{callback_data}['\"]",
            f"c\\.data\\.startswith\\(['\"]{callback_data.split('_')[0]}"
        ]
        
        found = False
        handler_name = None
        
        for pattern in patterns:
            matches = re.findall(pattern, code)
            if matches:
                found = True
                # –ò—â–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
                lines = code.split('\n')
                for i, line in enumerate(lines):
                    if re.search(pattern, line):
                        # –°–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å async def
                        for j in range(i+1, min(i+10, len(lines))):
                            if 'async def' in lines[j]:
                                handler_name = lines[j].split('async def')[1].split('(')[0].strip()
                                break
                        break
                if handler_name:
                    break
        
        if found:
            print(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω: {handler_name or 'unknown'}")
            results[callback_data] = {'status': '‚úÖ', 'handler': handler_name}
        else:
            print(f"  ‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ù–ï –Ω–∞–π–¥–µ–Ω!")
            results[callback_data] = {'status': '‚ùå', 'handler': None}
        print()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*50)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("="*50)
    
    total = len(results)
    working = sum(1 for r in results.values() if r['status'] == '‚úÖ')
    broken = total - working
    
    print(f"–í—Å–µ–≥–æ –∫–Ω–æ–ø–æ–∫: {total}")
    print(f"‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏—Ö: {working}")
    print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö: {broken}")
    
    if broken > 0:
        print("\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:")
        for callback_data, result in results.items():
            if result['status'] == '‚ùå':
                print(f"  - {BUTTONS[callback_data]} ({callback_data})")
    
    print("\n" + "="*50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥:")
    commands = {
        'start': 'start_command',
        'help': 'help_command',
        'recipe': 'recipe_command',
        'menu': 'menu_command',
        'random': 'random_command',
        'seasonal': 'seasonal_command',
        'pairing': 'pairing_command',
        'search': 'search_command',
        'trends': 'trends_command',
        'news': 'news_command',
    }
    
    for cmd, func_name in commands.items():
        if hasattr(bot, func_name):
            print(f"  ‚úÖ /{cmd} -> {func_name}")
        else:
            print(f"  ‚ùå /{cmd} -> {func_name} –ù–ï –ù–ê–ô–î–ï–ù–ê")

if __name__ == '__main__':
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ MIXTRIX Bot\n")
    print("="*50 + "\n")
    check_buttons()
    print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

