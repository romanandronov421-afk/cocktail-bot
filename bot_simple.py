#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import asyncio
import sys
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
import requests
import json
from datetime import datetime

print("=== –ó–∞–ø—É—Å–∫ MixMatrix Bot ===")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
print("–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
try:
    load_dotenv('env_file.txt')
    print("‚úì –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except Exception as e:
    print(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}")
    # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤
    try:
        load_dotenv('environment.env')
        print("‚úì –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ environment.env")
    except:
        print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        sys.exit(1)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
if not os.getenv('TELEGRAM_BOT_TOKEN'):
    print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

if not os.getenv('YANDEX_API_KEY'):
    print("‚ùå –û—à–∏–±–∫–∞: YANDEX_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

if not os.getenv('FOLDER_ID'):
    print("‚ùå –û—à–∏–±–∫–∞: FOLDER_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

print("‚úì –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞...")
try:
    bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
    dp = Dispatcher()
    print("‚úì –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    sys.exit(1)

# –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
class SimpleDatabase:
    def __init__(self):
        self.recipes = [
            {
                'name': '–ú–∞—Ä—Ç–∏–Ω–∏',
                'base_spirit': '–¥–∂–∏–Ω',
                'description': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∫–æ–∫—Ç–µ–π–ª—å —Å –¥–∂–∏–Ω–æ–º –∏ –≤–µ—Ä–º—É—Ç–æ–º'
            },
            {
                'name': '–ú–æ—Ö–∏—Ç–æ',
                'base_spirit': '—Ä–æ–º',
                'description': '–û—Å–≤–µ–∂–∞—é—â–∏–π –∫–æ–∫—Ç–µ–π–ª—å —Å —Ä–æ–º–æ–º, –º—è—Ç–æ–π –∏ –ª–∞–π–º–æ–º'
            }
        ]
    
    def search_recipes(self, query):
        """–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        query_lower = query.lower()
        results = []
        for recipe in self.recipes:
            if (query_lower in recipe['name'].lower() or 
                query_lower in recipe['base_spirit'].lower() or
                query_lower in recipe['description'].lower()):
                results.append(recipe)
        return results

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    db = SimpleDatabase()
    print("‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    sys.exit(1)

# Yandex Cloud AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
YANDEX_API_KEY = os.getenv('YANDEX_API_KEY')
YANDEX_FOLDER_ID = os.getenv('FOLDER_ID')
YANDEX_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

async def call_yandex_api(prompt: str) -> str:
    """–í—ã–∑–æ–≤ Yandex Cloud AI API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }
    
    data = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt",
        "completionOptions": {
            "stream": False,
            "temperature": 0.7,
            "maxTokens": 1000
        },
        "messages": [
            {
                "role": "user",
                "text": prompt
            }
        ]
    }
    
    try:
        response = requests.post(YANDEX_API_URL, headers=headers, json=data, timeout=30)
        response.raise_for_status()
        result = response.json()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Yandex API
        if 'result' in result and 'alternatives' in result['result']:
            return result['result']['alternatives'][0]['message']['text']
        else:
            return "–û—à–∏–±–∫–∞: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Yandex API"
            
    except requests.exceptions.Timeout:
        return "–û—à–∏–±–∫–∞: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Yandex API"
    except requests.exceptions.ConnectionError:
        return "–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Yandex API"
    except requests.exceptions.HTTPError as e:
        return f"–û—à–∏–±–∫–∞ HTTP: {e.response.status_code}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Yandex AI: {str(e)}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command('start'))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üç∏ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data="recipe"),
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="search")
        ],
        [
            InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω—ã–π", callback_data="random"),
            InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ])
    
    welcome_text = """
üçπ MixMatrixBot - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–∞—Ä–º–µ–Ω!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∫–æ–∫—Ç–µ–π–ª–µ–π! –Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç
‚Ä¢ –ù–∞–π—Ç–∏ –∫–æ–∫—Ç–µ–π–ª–∏ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º
‚Ä¢ –ü–æ–¥–æ–±—Ä–∞—Ç—å –∫–æ–∫—Ç–µ–π–ª—å –ø–æ–¥ –≤–∞—à–µ –±–ª—é–¥–æ

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/recipe - —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç
/search - –ø–æ–∏—Å–∫ –∫–æ–∫—Ç–µ–π–ª–µ–π
/random - —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å
/help - –ø–æ–º–æ—â—å

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã!
    """
    
    await message.reply(welcome_text, reply_markup=keyboard)

@dp.message(Command('help'))
async def help_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üçπ **MixMatrixBot - –°–ø—Ä–∞–≤–∫–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/recipe - —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç –∫–æ–∫—Ç–µ–π–ª—è
/search [–∑–∞–ø—Ä–æ—Å] - –ø–æ–∏—Å–∫ –∫–æ–∫—Ç–µ–π–ª–µ–π
/random - —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å

**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
/search –º–∞—Ä—Ç–∏–Ω–∏
/search –¥–∂–∏–Ω
/recipe

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤ —á–µ—Ä–µ–∑ Yandex GPT
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–∫—Ç–µ–π–ª–µ–π
    """
    await message.reply(help_text, parse_mode='Markdown')

@dp.message(Command('recipe'))
async def recipe_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /recipe"""
    await message.reply("üçπ –°–æ–∑–¥–∞—é –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –≤–∞—Å...")
    
    prompt = """
    –°–æ–∑–¥–∞–π —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∫–æ–∫—Ç–µ–π–ª—è —Å —É—á–µ—Ç–æ–º —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞.
    –í–∫–ª—é—á–∏ –≤ —Ä–µ—Ü–µ–ø—Ç:
    1. –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è
    2. –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å —Ç–æ—á–Ω—ã–º–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º–∏
    3. –ú–µ—Ç–æ–¥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
    4. –ü–æ–¥–∞—á–∞ –∏ —É–∫—Ä–∞—à–µ–Ω–∏–µ
    5. –ö—Ä–∞—Ç–∫—É—é –∏—Å—Ç–æ—Ä–∏—é –∏–ª–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é
    
    –°–¥–µ–ª–∞–π —Ä–µ—Ü–µ–ø—Ç –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–º –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.
    """
    
    try:
        recipe = await call_yandex_api(prompt)
        await message.reply(recipe)
    except Exception as e:
        await message.reply(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command('search'))
async def search_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if not args:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è –∏–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç]")
        return
    
    query = " ".join(args)
    await message.reply(f"üîç –ò—â—É —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
    
    try:
        recipes = db.search_recipes(query)
        
        if not recipes:
            await message.reply("–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç —Å –ø–æ–º–æ—â—å—é /recipe")
            return
        
        response = f"**–ù–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {len(recipes)}**\n\n"
        
        for i, recipe in enumerate(recipes[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Ä–µ—Ü–µ–ø—Ç–æ–≤
            response += f"**{i}. {recipe['name']}**\n"
            response += f"–ë–∞–∑–æ–≤—ã–π —Å–ø–∏—Ä—Ç: {recipe['base_spirit']}\n"
            response += f"–û–ø–∏—Å–∞–Ω–∏–µ: {recipe['description']}\n\n"
        
        if len(recipes) > 5:
            response += f"... –∏ –µ—â–µ {len(recipes) - 5} —Ä–µ—Ü–µ–ø—Ç–æ–≤"
        
        await message.reply(response, parse_mode='Markdown')
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")

@dp.message(Command('random'))
async def random_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random"""
    import random
    
    base_spirits = ['–¥–∂–∏–Ω', '–≤–æ–¥–∫–∞', '—Ä–æ–º', '–≤–∏—Å–∫–∏', '—Ç–µ–∫–∏–ª–∞', '–∫–æ–Ω—å—è–∫', '–±—Ä–µ–Ω–¥–∏']
    random_spirit = random.choice(base_spirits)
    
    prompt = f"""
    –°–æ–∑–¥–∞–π –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∫–æ–∫—Ç–µ–π–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ {random_spirit}.
    –°–¥–µ–ª–∞–π –∫–æ–∫—Ç–µ–π–ª—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ –Ω–µ–æ–±—ã—á–Ω—ã–º, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è.
    –í–∫–ª—é—á–∏:
    1. –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    2. –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º–∏
    3. –ú–µ—Ç–æ–¥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
    4. –ü–æ–¥–∞—á–∞ –∏ —É–∫—Ä–∞—à–µ–Ω–∏–µ
    5. –§–∏–ª–æ—Å–æ—Ñ–∏—é –∫–æ–∫—Ç–µ–π–ª—è
    
    –ü—É—Å—Ç—å —ç—Ç–æ –±—É–¥–µ—Ç —Å—é—Ä–ø—Ä–∏–∑!
    """
    
    await message.reply("üé≤ –°–æ–∑–¥–∞—é –¥–ª—è –≤–∞—Å —Å—é—Ä–ø—Ä–∏–∑-–∫–æ–∫—Ç–µ–π–ª—å...")
    
    try:
        recipe = await call_yandex_api(prompt)
        await message.reply(recipe)
    except Exception as e:
        await message.reply(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@dp.callback_query(lambda c: c.data == 'recipe')
async def process_callback_recipe(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–µ—Ü–µ–ø—Ç'"""
    try:
        await callback_query.answer()
        await recipe_command(callback_query.message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ recipe: {e}")

@dp.callback_query(lambda c: c.data == 'search')
async def process_callback_search(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∏—Å–∫'"""
    try:
        await callback_query.answer()
        await callback_query.message.reply(
            "üîç **–ü–æ–∏—Å–∫ –∫–æ–∫—Ç–µ–π–ª–µ–π**\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è –∏–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞!\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ –º–∞—Ä—Ç–∏–Ω–∏\n"
            "‚Ä¢ –¥–∂–∏–Ω\n"
            "‚Ä¢ –º–æ—Ö–∏—Ç–æ\n"
            "‚Ä¢ —Ä–æ–º\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /search [–∑–∞–ø—Ä–æ—Å]",
            parse_mode='Markdown'
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ search: {e}")

@dp.callback_query(lambda c: c.data == 'random')
async def process_callback_random(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ª—É—á–∞–π–Ω—ã–π'"""
    try:
        await callback_query.answer()
        await random_command(callback_query.message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ random: {e}")

@dp.callback_query(lambda c: c.data == 'help')
async def process_callback_help(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
    try:
        await callback_query.answer()
        await help_command(callback_query.message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ help: {e}")

@dp.message()
async def handle_text_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_message = message.text
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /, —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞
    if user_message.startswith('/'):
        await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    await message.reply(f"üîç –ò—â—É —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: {user_message}")
    
    try:
        recipes = db.search_recipes(user_message)
        
        if not recipes:
            await message.reply("–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç —Å –ø–æ–º–æ—â—å—é /recipe")
            return
        
        response = f"**–ù–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {len(recipes)}**\n\n"
        
        for i, recipe in enumerate(recipes[:5], 1):
            response += f"**{i}. {recipe['name']}**\n"
            response += f"–ë–∞–∑–æ–≤—ã–π —Å–ø–∏—Ä—Ç: {recipe['base_spirit']}\n"
            response += f"–û–ø–∏—Å–∞–Ω–∏–µ: {recipe['description']}\n\n"
        
        if len(recipes) > 5:
            response += f"... –∏ –µ—â–µ {len(recipes) - 5} —Ä–µ—Ü–µ–ø—Ç–æ–≤"
        
        await message.reply(response, parse_mode='Markdown')
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("–ó–∞–ø—É—Å–∫ MIXTRIX Bot...")
    print("‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –≥–æ—Ç–æ–≤–∞")
    print("‚úì Yandex API: –ø–æ–¥–∫–ª—é—á–µ–Ω")
    print("‚úì –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞: –∞–∫—Ç–∏–≤–Ω–∞")
    print("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
        bot_info = await bot.get_me()
        print(f"‚úì –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username} ({bot_info.first_name})")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp.start_polling(
            bot, 
            skip_updates=True,
            timeout=30,
            request_timeout=30,
            drop_pending_updates=True
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print("üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥")
        return

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
