import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
import requests
import json
from datetime import datetime
from database import CocktailDatabase

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = CocktailDatabase()

# –°–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –†–æ—Å—Å–∏–∏
SEASONAL_INGREDIENTS = {
    'winter': ['–∫–ª—é–∫–≤–∞', '–±—Ä—É—Å–Ω–∏–∫–∞', '–æ–±–ª–µ–ø–∏—Ö–∞', '—Ü–∏—Ç—Ä—É—Å—ã', '–∫–æ—Ä–∏—Ü–∞', '–≥–≤–æ–∑–¥–∏–∫–∞', '–º—É—Å–∫–∞—Ç–Ω—ã–π –æ—Ä–µ—Ö', '–≤–∞–Ω–∏–ª—å'],
    'spring': ['—Ä–µ–≤–µ–Ω—å', '—â–∞–≤–µ–ª—å', '–º–æ–ª–æ–¥—ã–µ —Ç—Ä–∞–≤—ã', '—Ü–≤–µ—Ç—ã —Å–∏—Ä–µ–Ω–∏', '—á–µ—Ä–µ–º—É—Ö–∞', '–º–µ–ª–∏—Å—Å–∞', '–º—è—Ç–∞'],
    'summer': ['–∫–ª—É–±–Ω–∏–∫–∞', '–º–∞–ª–∏–Ω–∞', '—Å–º–æ—Ä–æ–¥–∏–Ω–∞', '–∫—Ä—ã–∂–æ–≤–Ω–∏–∫', '–≤–∏—à–Ω—è', '–±–∞–∑–∏–ª–∏–∫', '—É–∫—Ä–æ–ø', '–ø–µ—Ç—Ä—É—à–∫–∞'],
    'autumn': ['—è–±–ª–æ–∫–∏', '–≥—Ä—É—à–∏', '—Å–ª–∏–≤—ã', '—Ç—ã–∫–≤–∞', '–∫–∞–ª–∏–Ω–∞', '—Ä—è–±–∏–Ω–∞', '–æ—Ä–µ—Ö–∏', '–º–µ–¥']
}

# –¢–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω (–æ–∫—Ç—è–±—Ä—å = –æ—Å–µ–Ω—å)
CURRENT_SEASON = 'autumn'

# –ë–∞–∑–æ–≤—ã–µ —Å–ø–∏—Ä—Ç—ã
BASE_SPIRITS = ['–¥–∂–∏–Ω', '–≤–æ–¥–∫–∞', '—Ä–æ–º', '–≤–∏—Å–∫–∏', '—Ç–µ–∫–∏–ª–∞', '–∫–æ–Ω—å—è–∫', '–±—Ä–µ–Ω–¥–∏']

# XAI API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
XAI_API_KEY = os.getenv('XAI_API_KEY')
XAI_API_URL = "https://api.x.ai/v1/chat/completions"

async def call_xai_api(prompt: str) -> str:
    """–í—ã–∑–æ–≤ XAI API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    headers = {
        "Authorization": f"Bearer {XAI_API_KEY}",
        "Content-Type": "application/json"
    }
    
    data = {
        "model": "grok-beta",
        "messages": [
            {
                "role": "user",
                "content": prompt
            }
        ],
        "max_tokens": 1000,
        "temperature": 0.7
    }
    
    try:
        response = requests.post(XAI_API_URL, headers=headers, json=data)
        response.raise_for_status()
        result = response.json()
        return result['choices'][0]['message']['content']
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {str(e)}"

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üç∏ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data="recipe"),
        InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search"),
        InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π", callback_data="random"),
        InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="menu"),
        InlineKeyboardButton("üçÇ –°–µ–∑–æ–Ω–Ω—ã–µ", callback_data="seasonal"),
        InlineKeyboardButton("üçΩÔ∏è –§—É–¥–ø–µ–π—Ä–∏–Ω–≥", callback_data="pairing"),
        InlineKeyboardButton("üìà –¢—Ä–µ–Ω–¥—ã", callback_data="trends"),
        InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="news"),
        InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data="create_recipe"),
        InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
    )
    
    welcome_text = """
üçπ **MixMatrixBot** - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–∞—Ä–º–µ–Ω!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∫–æ–∫—Ç–µ–π–ª–µ–π! –Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞
‚Ä¢ –ù–∞–π—Ç–∏ –∫–æ–∫—Ç–µ–π–ª–∏ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º –∏ —Å–µ–∑–æ–Ω—É
‚Ä¢ –ü–æ–¥–æ–±—Ä–∞—Ç—å –∫–æ–∫—Ç–µ–π–ª—å –ø–æ–¥ –≤–∞—à–µ –±–ª—é–¥–æ
‚Ä¢ –£–∑–Ω–∞—Ç—å –æ —Ç—Ä–µ–Ω–¥–∞—Ö –∏ –Ω–æ–≤–æ—Å—Ç—è—Ö –∏–Ω–¥—É—Å—Ç—Ä–∏–∏

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/recipe - —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç
/search - –ø–æ–∏—Å–∫ –∫–æ–∫—Ç–µ–π–ª–µ–π
/random - —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å
/seasonal - —Å–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏
/pairing - –ø–æ–¥–±–æ—Ä –ø–æ–¥ –±–ª—é–¥–æ
/create_recipe - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã!
    """
    
    await message.reply(welcome_text, reply_markup=keyboard, parse_mode='Markdown')

@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üçπ **MixMatrixBot - –°–ø—Ä–∞–≤–∫–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–∏—Å–∫:**
/recipe [—Å–ø–∏—Ä—Ç] [mocktail=yes/no] - —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç
/search [–∑–∞–ø—Ä–æ—Å] - –ø–æ–∏—Å–∫ –∫–æ–∫—Ç–µ–π–ª–µ–π
/random - —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å
/create_recipe - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç —Å AI

**–°–µ–∑–æ–Ω–Ω—ã–µ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ:**
/seasonal - —Å–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏ –¥–ª—è –†–æ—Å—Å–∏–∏
/pairing [–±–ª—é–¥–æ] - –ø–æ–¥–±–æ—Ä –∫–æ–∫—Ç–µ–π–ª—è –ø–æ–¥ –±–ª—é–¥–æ
/menu [—Ç–∏–ø] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é

**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
/trends - —Ç—Ä–µ–Ω–¥—ã –∫–æ–∫—Ç–µ–π–ª–µ–π 2025
/news - –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ HoReCa
/history [–∫–æ–∫—Ç–µ–π–ª—å] - –∏—Å—Ç–æ—Ä–∏—è –∫–æ–∫—Ç–µ–π–ª—è

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏—Ä—Ç—ã:**
–¥–∂–∏–Ω, –≤–æ–¥–∫–∞, —Ä–æ–º, –≤–∏—Å–∫–∏, —Ç–µ–∫–∏–ª–∞, –∫–æ–Ω—å—è–∫, –±—Ä–µ–Ω–¥–∏

**–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (–†–æ—Å—Å–∏—è):**
‚Ä¢ –ó–∏–º–∞: –∫–ª—é–∫–≤–∞, –±—Ä—É—Å–Ω–∏–∫–∞, —Ü–∏—Ç—Ä—É—Å—ã, –∫–æ—Ä–∏—Ü–∞
‚Ä¢ –í–µ—Å–Ω–∞: —Ä–µ–≤–µ–Ω—å, —â–∞–≤–µ–ª—å, –º–æ–ª–æ–¥—ã–µ —Ç—Ä–∞–≤—ã
‚Ä¢ –õ–µ—Ç–æ: —è–≥–æ–¥—ã, –±–∞–∑–∏–ª–∏–∫, —É–∫—Ä–æ–ø
‚Ä¢ –û—Å–µ–Ω—å: —è–±–ª–æ–∫–∏, –≥—Ä—É—à–∏, —Ç—ã–∫–≤–∞, –º–µ–¥

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –§—É–¥–ø–µ–π—Ä–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ The Flavor Bible
‚Ä¢ –°–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –†–æ—Å—Å–∏–∏
‚Ä¢ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
‚Ä¢ –ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–µ –º–µ–Ω—é —Å –º–∞—Ç—Ä–∏—Ü–µ–π –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è
    """
    await message.reply(help_text, parse_mode='Markdown')

@dp.message_handler(commands=['recipe'])
async def recipe_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /recipe"""
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    base_spirit = '–¥–∂–∏–Ω'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    mocktail = False
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    for arg in args:
        if arg.lower() in BASE_SPIRITS:
            base_spirit = arg.lower()
        elif 'mocktail=yes' in arg.lower() or 'mocktail=–¥–∞' in arg.lower():
            mocktail = True
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è AI
    mocktail_text = "mocktail (–±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π)" if mocktail else "–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π"
    seasonal_ingredients = ", ".join(SEASONAL_INGREDIENTS['october'])
    
    prompt = f"""
–°–æ–∑–¥–∞–π —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∫–æ–∫—Ç–µ–π–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ {base_spirit} —Å —É—á–µ—Ç–æ–º —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞ –∏–∑ The Flavor Bible.
–°–µ–∑–æ–Ω: –æ–∫—Ç—è–±—Ä—å 2025 (–∏—Å–ø–æ–ª—å–∑—É–π —Å–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {seasonal_ingredients}).
–¢–∏–ø: {mocktail_text} –∫–æ–∫—Ç–µ–π–ª—å.

–í–∫–ª—é—á–∏ –≤ —Ä–µ—Ü–µ–ø—Ç:
1. –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è
2. –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å —Ç–æ—á–Ω—ã–º–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º–∏
3. –ú–µ—Ç–æ–¥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
4. –ü–æ–¥–∞—á–∞ –∏ —É–∫—Ä–∞—à–µ–Ω–∏–µ
5. –ö—Ä–∞—Ç–∫—É—é –∏—Å—Ç–æ—Ä–∏—é –∏–ª–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é
6. –°–æ–≤–µ—Ç—ã –ø–æ —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥—É

–°–¥–µ–ª–∞–π —Ä–µ—Ü–µ–ø—Ç –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–º –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∏–Ω—Ü–∏–ø—ã The Flavor Bible.
    """
    
    await message.reply("üçπ –°–æ–∑–¥–∞—é –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –≤–∞—Å...")
    
    try:
        recipe = await call_xai_api(prompt)
        await message.reply(recipe)
    except Exception as e:
        await message.reply(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.message_handler(commands=['menu'])
async def menu_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    menu_type = 'seasonal'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    count = 5  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    for arg in args:
        if arg.lower() in ['seasonal', 'conceptual']:
            menu_type = arg.lower()
        elif arg.isdigit():
            count = min(int(arg), 10)  # –º–∞–∫—Å–∏–º—É–º 10 –∫–æ–∫—Ç–µ–π–ª–µ–π
    
    await message.reply(f"üìã –°–æ–∑–¥–∞—é {menu_type} –º–µ–Ω—é –∏–∑ {count} –∫–æ–∫—Ç–µ–π–ª–µ–π...")
    
    if menu_type == 'seasonal':
        await generate_seasonal_menu(message, count)
    else:
        await generate_conceptual_menu(message, count)

async def generate_seasonal_menu(message: types.Message, count: int):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∑–æ–Ω–Ω–æ–≥–æ –º–µ–Ω—é"""
    seasonal_ingredients = ", ".join(SEASONAL_INGREDIENTS['october'])
    
    prompt = f"""
–°–æ–∑–¥–∞–π —Å–µ–∑–æ–Ω–Ω–æ–µ –º–µ–Ω—é –∏–∑ {count} –∫–æ–∫—Ç–µ–π–ª–µ–π –¥–ª—è –æ–∫—Ç—è–±—Ä—è 2025.
–ò—Å–ø–æ–ª—å–∑—É–π —Å–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {seasonal_ingredients}.
–í–∫–ª—é—á–∏ —Ä–∞–∑–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ —Å–ø–∏—Ä—Ç—ã: –¥–∂–∏–Ω, –≤–∏—Å–∫–∏, —Ä–æ–º, —Ç–µ–∫–∏–ª–∞.

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–∫—Ç–µ–π–ª—è —É–∫–∞–∂–∏:
1. –ù–∞–∑–≤–∞–Ω–∏–µ
2. –ë–∞–∑–æ–≤—ã–π —Å–ø–∏—Ä—Ç
3. –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
4. –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∫—É—Å–∞
5. –°–µ–∑–æ–Ω–Ω—É—é –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å

–°–¥–µ–ª–∞–π –º–µ–Ω—é —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.
    """
    
    try:
        menu = await call_xai_api(prompt)
        await message.reply(menu)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é: {str(e)}")

async def generate_conceptual_menu(message: types.Message, count: int):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é"""
    prompt = f"""
–°–æ–∑–¥–∞–π –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –∏–∑ {count} –∫–æ–∫—Ç–µ–π–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è –º–∞—Ç—Ä–∏—Ü—É –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è:

**–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è:**
- –°—é—Ä—Ä–µ–∞–ª–∏–∑–º (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è)
- –ú–æ–¥–µ—Ä–Ω–∏–∑–º (—á–∏—Å—Ç—ã–µ –ª–∏–Ω–∏–∏, –º–∏–Ω–∏–º–∞–ª–∏–∑–º)
- –ë–∞—Ä–æ–∫–∫–æ (–±–æ–≥–∞—Ç—Å—Ç–≤–æ, —Å–ª–æ–∂–Ω–æ—Å—Ç—å)
- –ê–≤–∞–Ω–≥–∞—Ä–¥ (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã, –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏)

**–°–ø–æ—Å–æ–±—ã –≤–æ–ø–ª–æ—â–µ–Ω–∏—è:**
- –ê—Ä–æ–º–∞—Ç (–¥—É—Ö–∏, —ç—Ñ–∏—Ä–Ω—ã–µ –º–∞—Å–ª–∞)
- –¢–µ–∫—Å—Ç—É—Ä–∞ (–ø–µ–Ω–∞, –∂–µ–ª–µ, —ç–º—É–ª—å—Å–∏–∏)
- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–≥–æ—Ä—è—á–∏–µ, —Ö–æ–ª–æ–¥–Ω—ã–µ, –∫–æ–Ω—Ç—Ä–∞—Å—Ç—ã)
- –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è (–Ω–µ–æ–±—ã—á–Ω–∞—è –ø–æ–¥–∞—á–∞)

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–∫—Ç–µ–π–ª—è —É–∫–∞–∂–∏:
1. –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é
2. –ò—Å—Ç–æ—á–Ω–∏–∫ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è
3. –°–ø–æ—Å–æ–± –≤–æ–ø–ª–æ—â–µ–Ω–∏—è
4. –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –º–µ—Ç–æ–¥
5. –§–∏–ª–æ—Å–æ—Ñ–∏—é –∫–æ–∫—Ç–µ–π–ª—è

–°–¥–µ–ª–∞–π –º–µ–Ω—é –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–º.
    """
    
    try:
        menu = await call_xai_api(prompt)
        await message.reply(menu)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é: {str(e)}")

@dp.message_handler(commands=['trends'])
async def trends_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /trends"""
    trends_text = """
üìà **–¢—Ä–µ–Ω–¥—ã –∫–æ–∫—Ç–µ–π–ª–µ–π 2025**

**Zero-Proof Revolution:**
‚Ä¢ –°–ª–æ–∂–Ω—ã–µ –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ–µ—Ä–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
‚Ä¢ –ö–≤–∞—Å, –∫–æ–º–±—É—á–∞, –∫–µ—Ñ–∏—Ä –≤ –∫–∞—á–µ—Å—Ç–≤–µ –±–∞–∑—ã

**Fat-Washing:**
‚Ä¢ –ù–∞—Å—Ç–∞–∏–≤–∞–Ω–∏–µ —Å–ø–∏—Ä—Ç–∞ –Ω–∞ –∂–∏—Ä–∞—Ö (–º–∞—Å–ª–æ, –±–µ–∫–æ–Ω)
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–µ–º–æ–≤–æ–π —Ç–µ–∫—Å—Ç—É—Ä—ã
‚Ä¢ –ù–æ–≤—ã–µ –≤–∫—É—Å–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏

**–°–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**
‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏ —Å–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
‚Ä¢ –§–µ—Ä–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã
‚Ä¢ –î–∏–∫–∏–µ —Ç—Ä–∞–≤—ã –∏ —Ü–≤–µ—Ç—ã

**–¢–µ—Ö–Ω–∏–∫–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:**
‚Ä¢ Sous-vide –¥–ª—è –Ω–∞—Å—Ç–æ–µ–≤
‚Ä¢ –ö—Ä–∏–æ–≥–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
‚Ä¢ –ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è

**–ü–æ–¥–∞—á–∞:**
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
‚Ä¢ –î—ã–º, –ø–∞—Ä, —Å–≤–µ—Ç–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
‚Ä¢ –ù–µ–æ–±—ã—á–Ω–∞—è –ø–æ—Å—É–¥–∞ –∏ —Å–µ—Ä–≤–∏—Ä–æ–≤–∫–∞

**–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∫—É—Å—ã:**
‚Ä¢ –£–º–∞–º–∏ (–≥—Ä–∏–±—ã, —Å–æ–µ–≤—ã–π —Å–æ—É—Å)
‚Ä¢ –ö–∏—Å–ª—ã–µ –∏ —Ñ–µ—Ä–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
‚Ä¢ –¶–≤–µ—Ç–æ—á–Ω—ã–µ –∏ —Ç—Ä–∞–≤—è–Ω—ã–µ
‚Ä¢ –ü—Ä—è–Ω—ã–µ –∏ –æ—Å—Ç—Ä—ã–µ
    """
    await message.reply(trends_text, parse_mode='Markdown')

@dp.message_handler(commands=['news'])
async def news_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /news"""
    news_text = """
üì∞ **–ù–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ HoReCa**

**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:**
‚Ä¢ –ù–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –≤ IBA Official Cocktails 2025
‚Ä¢ –¢—Ä–µ–Ω–¥—ã –≤ –º–∏–∫—Å–æ–ª–æ–≥–∏–∏ –æ—Ç –≤–µ–¥—É—â–∏—Ö –±–∞—Ä–º–µ–Ω–æ–≤
‚Ä¢ –°–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ

**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:**
‚Ä¢ Difford's Guide - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
‚Ä¢ Imbibe Magazine - —Ç—Ä–µ–Ω–¥—ã –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏
‚Ä¢ Punch - –∏—Å—Ç–æ—Ä–∏—è –∏ –∫—É–ª—å—Ç—É—Ä–∞ –∫–æ–∫—Ç–µ–π–ª–µ–π

**–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏:**
‚Ä¢ –ù–æ–≤—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
‚Ä¢ –°–µ–∑–æ–Ω–Ω—ã–µ –º–µ–Ω—é –≤–µ–¥—É—â–∏—Ö –±–∞—Ä–æ–≤
‚Ä¢ –ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –≤ –ø–æ–¥–∞—á–µ –∫–æ–∫—Ç–µ–π–ª–µ–π
    """
    await message.reply(news_text, parse_mode='Markdown')

@dp.message_handler(commands=['random'])
async def random_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random"""
    import random
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–ø–∏—Ä—Ç
    random_spirit = random.choice(BASE_SPIRITS)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    seasonal_ingredients = SEASONAL_INGREDIENTS[CURRENT_SEASON]
    random_ingredients = random.sample(seasonal_ingredients, min(3, len(seasonal_ingredients)))
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–∫—Ç–µ–π–ª—è
    mocktail = random.choice([True, False])
    mocktail_text = "mocktail (–±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π)" if mocktail else "–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π"
    
    prompt = f"""
–°–æ–∑–¥–∞–π –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∫–æ–∫—Ç–µ–π–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ:
- –ë–∞–∑–æ–≤—ã–π —Å–ø–∏—Ä—Ç: {random_spirit}
- –°–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {', '.join(random_ingredients)}
- –¢–∏–ø: {mocktail_text}
- –°–µ–∑–æ–Ω: {CURRENT_SEASON} (–†–æ—Å—Å–∏—è)

–°–¥–µ–ª–∞–π –∫–æ–∫—Ç–µ–π–ª—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ –Ω–µ–æ–±—ã—á–Ω—ã–º, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è.
–í–∫–ª—é—á–∏:
1. –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
2. –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º–∏
3. –ú–µ—Ç–æ–¥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
4. –ü–æ–¥–∞—á–∞ –∏ —É–∫—Ä–∞—à–µ–Ω–∏–µ
5. –§–∏–ª–æ—Å–æ—Ñ–∏—é –∫–æ–∫—Ç–µ–π–ª—è
6. –°–æ–≤–µ—Ç—ã –ø–æ —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥—É

–ü—É—Å—Ç—å —ç—Ç–æ –±—É–¥–µ—Ç —Å—é—Ä–ø—Ä–∏–∑!
    """
    
    await message.reply("üé≤ –°–æ–∑–¥–∞—é –¥–ª—è –≤–∞—Å —Å—é—Ä–ø—Ä–∏–∑-–∫–æ–∫—Ç–µ–π–ª—å...")
    
    try:
        recipe = await call_xai_api(prompt)
        await message.reply(recipe)
    except Exception as e:
        await message.reply(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.message_handler(commands=['seasonal'])
async def seasonal_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /seasonal"""
    seasonal_ingredients = SEASONAL_INGREDIENTS[CURRENT_SEASON]
    season_names = {
        'winter': '–∑–∏–º–∞',
        'spring': '–≤–µ—Å–Ω–∞', 
        'summer': '–ª–µ—Ç–æ',
        'autumn': '–æ—Å–µ–Ω—å'
    }
    
    current_season_name = season_names[CURRENT_SEASON]
    
    prompt = f"""
–°–æ–∑–¥–∞–π 3 —Å–µ–∑–æ–Ω–Ω—ã—Ö –∫–æ–∫—Ç–µ–π–ª—è –¥–ª—è {current_season_name} –≤ –†–æ—Å—Å–∏–∏.
–ò—Å–ø–æ–ª—å–∑—É–π —Å–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {', '.join(seasonal_ingredients)}.

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–∫—Ç–µ–π–ª—è:
1. –ù–∞–∑–≤–∞–Ω–∏–µ —Å —Å–µ–∑–æ–Ω–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π
2. –ë–∞–∑–æ–≤—ã–π —Å–ø–∏—Ä—Ç (—Ä–∞–∑–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ)
3. –°–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
4. –ú–µ—Ç–æ–¥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
5. –ü–æ–¥–∞—á–∞ –∏ —É–∫—Ä–∞—à–µ–Ω–∏–µ
6. –°–µ–∑–æ–Ω–Ω–∞—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è

–°–¥–µ–ª–∞–π –∫–æ–∫—Ç–µ–π–ª–∏ —Ç–µ–ø–ª—ã–º–∏ –∏ —É—é—Ç–Ω—ã–º–∏ –¥–ª—è {current_season_name}.
    """
    
    await message.reply(f"üçÇ –°–æ–∑–¥–∞—é —Å–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏ –¥–ª—è {current_season_name}...")
    
    try:
        recipes = await call_xai_api(prompt)
        await message.reply(recipes)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–∑–æ–Ω–Ω—ã—Ö –∫–æ–∫—Ç–µ–π–ª–µ–π: {str(e)}")

@dp.message_handler(commands=['pairing'])
async def pairing_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pairing"""
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if not args:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pairing [–Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞]\n–ü—Ä–∏–º–µ—Ä: /pairing —Å—Ç–µ–π–∫")
        return
    
    dish = " ".join(args)
    
    prompt = f"""
–ü–æ–¥–±–µ—Ä–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å –¥–ª—è –±–ª—é–¥–∞: {dish}

–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞ –∏–∑ The Flavor Bible:
1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–∫—É—Å–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –±–ª—é–¥–∞
2. –ü–æ–¥–±–µ—Ä–∏ —Å–ø–∏—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ø–æ–ª–Ω—è–µ—Ç –≤–∫—É—Å
3. –í—ã–±–µ—Ä–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –≥–∞—Ä–º–æ–Ω–∏–∏
4. –£—á—Ç–∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (—Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω: {CURRENT_SEASON})

–í–∫–ª—é—á–∏:
1. –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è
2. –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ (–ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –∫–æ–∫—Ç–µ–π–ª—å)
3. –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
4. –ú–µ—Ç–æ–¥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
5. –ü–æ–¥–∞—á–∞ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
6. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Å–æ—á–µ—Ç–∞–Ω–∏—é

–°–¥–µ–ª–∞–π –ø–æ–¥–±–æ—Ä–∫—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–π.
    """
    
    await message.reply(f"üçΩÔ∏è –ü–æ–¥–±–∏—Ä–∞—é –∫–æ–∫—Ç–µ–π–ª—å –¥–ª—è {dish}...")
    
    try:
        pairing = await call_xai_api(prompt)
        await message.reply(pairing)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –∫–æ–∫—Ç–µ–π–ª—è: {str(e)}")

@dp.message_handler(commands=['create_recipe'])
async def create_recipe_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create_recipe"""
    await message.reply("""
‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞**

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
/recipe [—Å–ø–∏—Ä—Ç] [mocktail=yes/no]

–ò–ª–∏ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à —Ä–µ—Ü–µ–ø—Ç –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –∏ —è –ø–æ–º–æ–≥—É –µ–≥–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å!

**–ü—Ä–∏–º–µ—Ä—ã:**
- "–•–æ—á—É –∫–æ–∫—Ç–µ–π–ª—å —Å –¥–∂–∏–Ω–æ–º –∏ –º—è—Ç–æ–π"
- "–°–æ–∑–¥–∞–π —á—Ç–æ-—Ç–æ —Å —Ç–µ–∫–∏–ª–æ–π –∏ –ª–∞–π–º–æ–º"
- "–ù—É–∂–µ–Ω –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å —Å —è–≥–æ–¥–∞–º–∏"

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –∏ —è —Å–æ–∑–¥–∞–º —Ä–µ—Ü–µ–ø—Ç!
    """, parse_mode='Markdown')

@dp.message_handler(commands=['search'])
async def search_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if not args:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è –∏–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç]")
        return
    
    query = " ".join(args)
    await message.reply(f"üîç –ò—â—É —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
    
    try:
        recipes = db.search_recipes(query)
        
        if not recipes:
            await message.reply("–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç —Å –ø–æ–º–æ—â—å—é /recipe")
            return
        
        response = f"**–ù–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {len(recipes)}**\n\n"
        
        for i, recipe in enumerate(recipes[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Ä–µ—Ü–µ–ø—Ç–æ–≤
            response += f"**{i}. {recipe['name']}**\n"
            response += f"–ë–∞–∑–æ–≤—ã–π —Å–ø–∏—Ä—Ç: {recipe['base_spirit']}\n"
            response += f"–û–ø–∏—Å–∞–Ω–∏–µ: {recipe['description'][:100]}...\n\n"
        
        if len(recipes) > 5:
            response += f"... –∏ –µ—â–µ {len(recipes) - 5} —Ä–µ—Ü–µ–ø—Ç–æ–≤"
        
        await message.reply(response, parse_mode='Markdown')
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")

@dp.message_handler(commands=['history'])
async def history_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history"""
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if not args:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /history [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è]")
        return
    
    cocktail_name = " ".join(args)
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    recipe = db.get_recipe_by_name(cocktail_name)
    
    if recipe and recipe.get('history'):
        await message.reply(f"**–ò—Å—Ç–æ—Ä–∏—è –∫–æ–∫—Ç–µ–π–ª—è {cocktail_name}:**\n\n{recipe['history']}", parse_mode='Markdown')
        return
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º AI
    await message.reply(f"üìö –ò—â—É –∏—Å—Ç–æ—Ä–∏—é –∫–æ–∫—Ç–µ–π–ª—è {cocktail_name}...")
    
    prompt = f"""
–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∫–æ–∫—Ç–µ–π–ª—è "{cocktail_name}".
–í–∫–ª—é—á–∏:
1. –ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è
2. –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
3. –≠–≤–æ–ª—é—Ü–∏—é —Ä–µ—Ü–µ–ø—Ç–∞
4. –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã
5. –í–ª–∏—è–Ω–∏–µ –Ω–∞ –∫–æ–∫—Ç–µ–π–ª—å–Ω—É—é –∫—É–ª—å—Ç—É—Ä—É

–ï—Å–ª–∏ —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å, –∏—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.
    """
    
    try:
        history = await call_xai_api(prompt)
        await message.reply(f"**–ò—Å—Ç–æ—Ä–∏—è –∫–æ–∫—Ç–µ–π–ª—è {cocktail_name}:**\n\n{history}", parse_mode='Markdown')
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

@dp.callback_query_handler(lambda c: c.data == 'recipe')
async def process_callback_recipe(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–µ—Ü–µ–ø—Ç'"""
    await callback_query.answer()
    await recipe_command(callback_query.message)

@dp.callback_query_handler(lambda c: c.data == 'menu')
async def process_callback_menu(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–µ–Ω—é'"""
    await callback_query.answer()
    await menu_command(callback_query.message)

@dp.callback_query_handler(lambda c: c.data == 'trends')
async def process_callback_trends(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–¢—Ä–µ–Ω–¥—ã'"""
    await callback_query.answer()
    await trends_command(callback_query.message)

@dp.callback_query_handler(lambda c: c.data == 'news')
async def process_callback_news(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–æ–≤–æ—Å—Ç–∏'"""
    await callback_query.answer()
    await news_command(callback_query.message)

@dp.callback_query_handler(lambda c: c.data == 'help')
async def process_callback_help(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
    await callback_query.answer()
    await help_command(callback_query.message)

@dp.callback_query_handler(lambda c: c.data == 'random')
async def process_callback_random(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ª—É—á–∞–π–Ω—ã–π'"""
    await callback_query.answer()
    await random_command(callback_query.message)

@dp.callback_query_handler(lambda c: c.data == 'seasonal')
async def process_callback_seasonal(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–µ–∑–æ–Ω–Ω—ã–µ'"""
    await callback_query.answer()
    await seasonal_command(callback_query.message)

@dp.callback_query_handler(lambda c: c.data == 'pairing')
async def process_callback_pairing(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–§—É–¥–ø–µ–π—Ä–∏–Ω–≥'"""
    await callback_query.answer()
    await callback_query.message.reply(
        "üçΩÔ∏è **–§—É–¥–ø–µ–π—Ä–∏–Ω–≥**\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, –∏ —è –ø–æ–¥–±–µ—Ä—É –∏–¥–µ–∞–ª—å–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å!\n\n"
        "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
        "‚Ä¢ —Å—Ç–µ–π–∫\n"
        "‚Ä¢ –ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞\n"
        "‚Ä¢ —Å—É—à–∏\n"
        "‚Ä¢ —à–æ–∫–æ–ª–∞–¥–Ω—ã–π –¥–µ—Å–µ—Ä—Ç\n"
        "‚Ä¢ —Å—ã—Ä–Ω–∞—è —Ç–∞—Ä–µ–ª–∫–∞\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /pairing [–±–ª—é–¥–æ]",
        parse_mode='Markdown'
    )

@dp.callback_query_handler(lambda c: c.data == 'create_recipe')
async def process_callback_create_recipe(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç'"""
    await callback_query.answer()
    await create_recipe_command(callback_query.message)

@dp.message_handler()
async def handle_other_messages(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = message.text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞
    recipe_keywords = ['–∫–æ–∫—Ç–µ–π–ª—å', '—Ä–µ—Ü–µ–ø—Ç', '—Å–æ–∑–¥–∞–π', '—Ö–æ—á—É', '–Ω—É–∂–µ–Ω', '—Å–¥–µ–ª–∞–π', '–ø—Ä–∏–≥–æ—Ç–æ–≤—å']
    if any(keyword in text for keyword in recipe_keywords):
        await message.reply("üçπ –°–æ–∑–¥–∞—é —Ä–µ—Ü–µ–ø—Ç –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É...")
        
        prompt = f"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Å–æ–∑–¥–∞—Ç—å –∫–æ–∫—Ç–µ–π–ª—å: "{message.text}"

–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—á–∏—Ç—ã–≤–∞—è:
1. –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (—Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω: {CURRENT_SEASON})
2. –ü—Ä–∏–Ω—Ü–∏–ø—ã —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞
3. –ë–∞–ª–∞–Ω—Å –≤–∫—É—Å–æ–≤
4. –ü—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è

–í–∫–ª—é—á–∏:
1. –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è
2. –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º–∏
3. –ú–µ—Ç–æ–¥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
4. –ü–æ–¥–∞—á–∞ –∏ —É–∫—Ä–∞—à–µ–Ω–∏–µ
5. –û–ø–∏—Å–∞–Ω–∏–µ –≤–∫—É—Å–∞
6. –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é

–°–¥–µ–ª–∞–π —Ä–µ—Ü–µ–ø—Ç –ø–æ–Ω—è—Ç–Ω—ã–º –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–º.
        """
        
        try:
            recipe = await call_xai_api(prompt)
            await message.reply(recipe)
        except Exception as e:
            await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {str(e)}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥
    pairing_keywords = ['–±–ª—é–¥–æ', '–µ–¥–∞', '–ø–æ–¥–æ–π–¥–µ—Ç', '—Å–æ—á–µ—Ç–∞–µ—Ç—Å—è', '–∫ –µ–¥–µ', '–∫ –±–ª—é–¥—É']
    if any(keyword in text for keyword in pairing_keywords):
        await message.reply("üçΩÔ∏è –ü–æ–¥–±–∏—Ä–∞—é –∫–æ–∫—Ç–µ–π–ª—å –ø–æ–¥ –≤–∞—à–µ –±–ª—é–¥–æ...")
        
        prompt = f"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–æ–∫—Ç–µ–π–ª—å –∫ –±–ª—é–¥—É: "{message.text}"

–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞ –∏–∑ The Flavor Bible:
1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–∫—É—Å–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –±–ª—é–¥–∞
2. –ü–æ–¥–±–µ—Ä–∏ —Å–ø–∏—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ø–æ–ª–Ω—è–µ—Ç –≤–∫—É—Å
3. –í—ã–±–µ—Ä–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –≥–∞—Ä–º–æ–Ω–∏–∏
4. –£—á—Ç–∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (—Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω: {CURRENT_SEASON})

–í–∫–ª—é—á–∏:
1. –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è
2. –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞
3. –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
4. –ú–µ—Ç–æ–¥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
5. –ü–æ–¥–∞—á–∞ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
6. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Å–æ—á–µ—Ç–∞–Ω–∏—é
        """
        
        try:
            pairing = await call_xai_api(prompt)
            await message.reply(pairing)
        except Exception as e:
            await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –∫–æ–∫—Ç–µ–π–ª—è: {str(e)}")
        return
    
    # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.reply(
        "–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –≤—ã—à–µ.\n\n"
        "üí° **–°–æ–≤–µ—Ç:** –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ '–•–æ—á—É –∫–æ–∫—Ç–µ–π–ª—å —Å –¥–∂–∏–Ω–æ–º'\n"
        "‚Ä¢ '–ü–æ–¥–±–µ—Ä–∏ –∫–æ–∫—Ç–µ–π–ª—å –∫ —Å—Ç–µ–π–∫—É'\n"
        "‚Ä¢ '–°–æ–∑–¥–∞–π —á—Ç–æ-—Ç–æ —Å —è–≥–æ–¥–∞–º–∏'",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
        ),
        parse_mode='Markdown'
    )

if __name__ == '__main__':
    print("üçπ MixMatrixBot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    executor.start_polling(dp, skip_updates=True)
