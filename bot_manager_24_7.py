#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ MIXTRIX –≤ —Ä–µ–∂–∏–º–µ 24/7
—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
"""

import os
import sys
import time
import subprocess
import signal
from datetime import datetime

class BotManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º 24/7"""
    
    def __init__(self):
        self.bot_process = None
        self.restart_count = 0
        self.max_restarts = 10  # –ú–∞–∫—Å–∏–º—É–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –∑–∞ —á–∞—Å
        self.restart_window = 3600  # –û–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.last_restart_time = 0
        
    def log(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"[{timestamp}] {message}")
        
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.log("üç∏ –ó–∞–ø—É—Å–∫ MIXTRIX Bot...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
            if not os.path.exists('bot.py'):
                self.log("‚ùå –§–∞–π–ª bot.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return False
                
            if not os.path.exists('env_file.txt'):
                self.log("‚ùå –§–∞–π–ª env_file.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
            self.bot_process = subprocess.Popen(
                [sys.executable, 'bot.py'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=1,
                universal_newlines=True
            )
            
            self.log("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            self.log(f"üìä PID –ø—Ä–æ—Ü–µ—Å—Å–∞: {self.bot_process.pid}")
            return True
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return False
    
    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.bot_process:
            try:
                self.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
                self.bot_process.terminate()
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
                try:
                    self.bot_process.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    self.log("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
                    self.bot_process.kill()
                    self.bot_process.wait()
                
                self.log("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                self.bot_process = None
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
    
    def is_bot_running(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç"""
        if self.bot_process is None:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞
        poll = self.bot_process.poll()
        return poll is None
    
    def can_restart(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        current_time = time.time()
        
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —á–∞—Å–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        if current_time - self.last_restart_time > self.restart_window:
            self.restart_count = 0
        
        return self.restart_count < self.max_restarts
    
    def restart_bot(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.can_restart():
            self.log("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤!")
            return False
        
        self.restart_count += 1
        self.last_restart_time = time.time()
        
        self.log(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {self.restart_count}/{self.max_restarts})...")
        
        self.stop_bot()
        time.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
        
        return self.start_bot()
    
    def monitor_bot(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        self.log("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞ 24/7...")
        self.log("üì± –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        if not self.start_bot():
            self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞!")
            return
        
        try:
            while True:
                time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
                if not self.is_bot_running():
                    self.log("‚ö†Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
                    
                    if not self.restart_bot():
                        self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞!")
                        break
                else:
                    # –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                    if self.restart_count > 0:
                        self.log("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
                        self.restart_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ
                
        except KeyboardInterrupt:
            self.log("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            self.stop_bot()
            self.log("üëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.stop_bot()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üç∏ MIXTRIX Bot Manager 24/7")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    print(f"‚úÖ Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    required_files = ['bot.py', 'env_file.txt']
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file} - –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"‚ùå {file} - –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    try:
        from dotenv import load_dotenv
        load_dotenv('env_file.txt')
        
        token = os.getenv('TELEGRAM_BOT_TOKEN')
        yandex_key = os.getenv('YANDEX_API_KEY')
        folder_id = os.getenv('FOLDER_ID')
        
        if token and yandex_key and folder_id:
            print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        else:
            print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
            return
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}")
        return
    
    print("\nüéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:")
    print("‚Ä¢ –§—É–¥–ø–µ–π—Ä–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ The Flavor Bible")
    print("‚Ä¢ 300+ –≤–∫—É—Å–æ–≤—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π")
    print("‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
    print("‚Ä¢ –°–µ–∑–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –†–æ—Å—Å–∏–∏")
    print("‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö")
    
    print("\nüöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ 24/7...")
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    manager = BotManager()
    manager.monitor_bot()

if __name__ == "__main__":
    main()






