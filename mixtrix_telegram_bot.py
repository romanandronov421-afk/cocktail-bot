#!/usr/bin/env python3
"""
MIXTRIXüç∏ Professional Telegram Bot
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è –±–∞—Ä–æ–≤ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤

M - Mixology
I - Innovation  
X - X-factor
T - Taste
R - Recipes
I - Ingredients
X - Xperience
"""

import asyncio
import logging
import os
import sqlite3
from typing import Dict, List, Optional
from datetime import datetime
import json

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

from mixtrix_professional import MIXTRIXBot, UserRole, CocktailCategory, DifficultyLevel
from mixtrix_ai import MIXTRIXAI, FlavorProfile
from populate_mixtrix_db import MIXTRIXDatabasePopulator
from seasonal_ingredients_service import SeasonalIngredientsService

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('env_file.txt')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('MIXTRIX_BOT')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MIXTRIX —Å–∏—Å—Ç–µ–º—ã
mixtrix_system = MIXTRIXBot()
mixtrix_ai = MIXTRIXAI()
seasonal_service = SeasonalIngredientsService()

# –ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_cache = {}

class MIXTRIXTelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å MIXTRIX Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot = bot
        self.dp = dp
        self.mixtrix = mixtrix_system
        self.ai = mixtrix_ai
        self.logger = logger
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        await self.mixtrix.initialize()
        self.logger.info("üç∏ MIXTRIX Professional System initialized")
    
    def get_user_role(self, user_id: int) -> UserRole:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        return UserRole.BARTENDER
    
    def get_main_menu_keyboard(self, user_role: UserRole) -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        builder = InlineKeyboardBuilder()
        
        if user_role in [UserRole.BARTENDER, UserRole.BARISTA]:
            builder.add(InlineKeyboardButton(
                text="üç∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤",
                callback_data="generate_recipe"
            ))
            builder.add(InlineKeyboardButton(
                text="üìã –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é",
                callback_data="create_menu"
            ))
            builder.add(InlineKeyboardButton(
                text="üçΩÔ∏è –§—É–¥–ø–µ–π—Ä–∏–Ω–≥",
                callback_data="food_pairing"
            ))
            builder.add(InlineKeyboardButton(
                text="üåø –°–µ–∑–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                callback_data="seasonal"
            ))
        
        if user_role in [UserRole.MANAGER, UserRole.OWNER]:
            builder.add(InlineKeyboardButton(
                text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
                callback_data="analytics"
            ))
            builder.add(InlineKeyboardButton(
                text="üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏",
                callback_data="cost_calculation"
            ))
            builder.add(InlineKeyboardButton(
                text="üìà –¢—Ä–µ–Ω–¥—ã –∏–Ω–¥—É—Å—Ç—Ä–∏–∏",
                callback_data="industry_trends"
            ))
        
        # –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        builder.add(InlineKeyboardButton(
            text="üì∞ –ù–æ–≤–æ—Å—Ç–∏ HORECA",
            callback_data="horeca_news"
        ))
        builder.add(InlineKeyboardButton(
            text="‚ùì –ü–æ–º–æ—â—å",
            callback_data="help"
        ))
        
        builder.adjust(2)
        return builder.as_markup()
    
    def get_difficulty_keyboard(self) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        builder = InlineKeyboardBuilder()
        
        difficulties = [
            ("üü¢ –ù–∞—á–∏–Ω–∞—é—â–∏–π", "beginner"),
            ("üü° –°—Ä–µ–¥–Ω–∏–π", "intermediate"),
            ("üü† –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "advanced"),
            ("üî¥ –≠–∫—Å–ø–µ—Ä—Ç", "expert")
        ]
        
        for text, data in difficulties:
            builder.add(InlineKeyboardButton(
                text=text,
                callback_data=f"difficulty_{data}"
            ))
        
        builder.adjust(2)
        return builder.as_markup()
    
    def get_season_keyboard(self) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–µ–∑–æ–Ω–∞"""
        builder = InlineKeyboardBuilder()
        
        seasons = [
            ("üå∏ –í–µ—Å–Ω–∞", "spring"),
            ("‚òÄÔ∏è –õ–µ—Ç–æ", "summer"),
            ("üçÇ –û—Å–µ–Ω—å", "autumn"),
            ("‚ùÑÔ∏è –ó–∏–º–∞", "winter")
        ]
        
        for text, data in seasons:
            builder.add(InlineKeyboardButton(
                text=text,
                callback_data=f"season_{data}"
            ))
        
        builder.adjust(2)
        return builder.as_markup()
    
    def get_base_spirit_keyboard(self) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –±–∞–∑–æ–≤–æ–≥–æ —Å–ø–∏—Ä—Ç–∞"""
        builder = InlineKeyboardBuilder()
        
        spirits = [
            ("üç∏ –î–∂–∏–Ω", "–¥–∂–∏–Ω –ª–æ–Ω–¥–æ–Ω—Å–∫–∏–π"),
            ("ü•É –í–æ–¥–∫–∞", "–≤–æ–¥–∫–∞ –ø—Ä–µ–º–∏—É–º"),
            ("üçπ –†–æ–º", "—Ä–æ–º –±–µ–ª—ã–π"),
            ("üåµ –¢–µ–∫–∏–ª–∞", "—Ç–µ–∫–∏–ª–∞"),
            ("ü•É –í–∏—Å–∫–∏", "–≤–∏—Å–∫–∏ —Ä–∂–∞–Ω–æ–π"),
            ("üç∑ –ö–æ–Ω—å—è–∫", "–∫–æ–Ω—å—è–∫")
        ]
        
        for text, data in spirits:
            builder.add(InlineKeyboardButton(
                text=text,
                callback_data=f"spirit_{data}"
            ))
        
        builder.adjust(2)
        return builder.as_markup()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
mixtrix_bot = MIXTRIXTelegramBot()

@dp.message(CommandStart())
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    user_role = mixtrix_bot.get_user_role(user_id)
    
    welcome_text = f"""
üç∏ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MIXTRIX!*

*M* - Mixology | *I* - Innovation | *X* - X-factor
*T* - Taste | *R* - Recipes | *I* - Ingredients | *X* - Xperience

–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–∫—Ç–µ–π–ª–µ–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞—Ä–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏.

–í–∞—à–∞ —Ä–æ–ª—å: *{user_role.value.title()}*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    keyboard = mixtrix_bot.get_main_menu_keyboard(user_role)
    await message.answer(welcome_text, reply_markup=keyboard, parse_mode='Markdown')

@dp.message(Command("help"))
async def help_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üç∏ *MIXTRIX Professional System*

*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*

üç∏ *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤*
‚Ä¢ AI-—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª–µ–π —Å —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–æ–º
‚Ä¢ –°–µ–∑–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é

üìã *–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é*
‚Ä¢ –°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã
‚Ä¢ –ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–µ –º–µ–Ω—é
‚Ä¢ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –º–∞—Ä–∂–∏

üçΩÔ∏è *–§—É–¥–ø–µ–π—Ä–∏–Ω–≥*
‚Ä¢ –°–æ—á–µ—Ç–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª–µ–π —Å –±–ª—é–¥–∞–º–∏
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ Flavor Bible
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤–∫—É—Å–æ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π

üåø *–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å*
‚Ä¢ –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
‚Ä¢ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –∫–ª–∏–º–∞—Ç
‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã

üì∞ *HORECA –Ω–æ–≤–æ—Å—Ç–∏*
‚Ä¢ –¢—Ä–µ–Ω–¥—ã –∏–Ω–¥—É—Å—Ç—Ä–∏–∏
‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏ –æ—Ç Difford's Guide
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–∫–∞

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/menu - –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é
/recipe - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
/news - –ù–æ–≤–æ—Å—Ç–∏ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏
/seasonal - –°–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
/ingredients - –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º
"""
    
    await message.answer(help_text, parse_mode='Markdown')

@dp.message(Command("seasonal"))
async def seasonal_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /seasonal - —Å–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞
        seasonal_message = seasonal_service.format_all_seasonal_ingredients_message()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–∞–∑–æ–≤–æ–≥–æ —Å–ø–∏—Ä—Ç–∞
        keyboard = InlineKeyboardBuilder()
        base_spirits = ["–¥–∂–∏–Ω –ª–æ–Ω–¥–æ–Ω—Å–∫–∏–π", "–≤–æ–¥–∫–∞ –ø—Ä–µ–º–∏—É–º", "–≤–∏—Å–∫–∏ —Ä–∂–∞–Ω–æ–π", "–∫–æ–Ω—å—è–∫", "—Ä–æ–º –±–µ–ª—ã–π", "—Ç–µ–∫–∏–ª–∞"]
        
        for spirit in base_spirits:
            keyboard.add(InlineKeyboardButton(
                text=spirit.title(),
                callback_data=f"seasonal_{spirit}"
            ))
        
        keyboard.adjust(2)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
        
        await message.answer(
            seasonal_message + "\n\nüç∏ *–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Ä—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:*",
            reply_markup=keyboard.as_markup(),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ seasonal: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.")

@dp.message(Command("ingredients"))
async def ingredients_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ingredients - –ø–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º"""
    try:
        text = """
üç∏ *–ü–æ–∏—Å–∫ –∫–æ–∫—Ç–µ–π–ª–µ–π –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º*

–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø—Ä–æ–±–µ–ª.
–ù–∞–ø—Ä–∏–º–µ—Ä: "–¥–∂–∏–Ω, –ª–∞–π–º, –º—è—Ç–∞" –∏–ª–∏ "–≤–æ–¥–∫–∞ –ª–∏–º–æ–Ω —Å–∞—Ö–∞—Ä"

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–∫—Ç–µ–π–ª–µ–π
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /seasonal –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–µ–∑–æ–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        """
        
        await message.answer(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ingredients: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")

@dp.callback_query(lambda c: c.data.startswith("seasonal_"))
async def handle_seasonal_spirit(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±–∞–∑–æ–≤–æ–≥–æ —Å–ø–∏—Ä—Ç–∞ –¥–ª—è —Å–µ–∑–æ–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"""
    await callback.answer()
    
    try:
        base_spirit = callback.data.replace("seasonal_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Ä—Ç–∞
        seasonal_message = seasonal_service.format_seasonal_ingredients_message(base_spirit)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–æ–∫—Ç–µ–π–ª–µ–π
        suggestions = seasonal_service.get_seasonal_cocktail_suggestions(base_spirit)
        
        if suggestions:
            seasonal_message += "\n\nüç∏ *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏:*\n"
            for cocktail in suggestions:
                seasonal_message += f"‚Ä¢ *{cocktail['name']}* - {cocktail['description'][:60]}...\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ —Å–µ–∑–æ–Ω–Ω—ã–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º",
            callback_data="back_to_seasonal"
        ))
        
        await callback.message.edit_text(
            seasonal_message,
            reply_markup=keyboard.as_markup(),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–µ–∑–æ–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

@dp.callback_query(lambda c: c.data == "back_to_seasonal")
async def handle_back_to_seasonal(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–µ–∑–æ–Ω–Ω—ã–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º"""
    await callback.answer()
    
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É —Å–µ–∑–æ–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        seasonal_message = seasonal_service.format_all_seasonal_ingredients_message()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–∞–∑–æ–≤–æ–≥–æ —Å–ø–∏—Ä—Ç–∞
        keyboard = InlineKeyboardBuilder()
        base_spirits = ["–¥–∂–∏–Ω –ª–æ–Ω–¥–æ–Ω—Å–∫–∏–π", "–≤–æ–¥–∫–∞ –ø—Ä–µ–º–∏—É–º", "–≤–∏—Å–∫–∏ —Ä–∂–∞–Ω–æ–π", "–∫–æ–Ω—å—è–∫", "—Ä–æ–º –±–µ–ª—ã–π", "—Ç–µ–∫–∏–ª–∞"]
        
        for spirit in base_spirits:
            keyboard.add(InlineKeyboardButton(
                text=spirit.title(),
                callback_data=f"seasonal_{spirit}"
            ))
        
        keyboard.adjust(2)
        
        await callback.message.edit_text(
            seasonal_message + "\n\nüç∏ *–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Ä—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:*",
            reply_markup=keyboard.as_markup(),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–µ–∑–æ–Ω–Ω—ã–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ.")

@dp.callback_query(lambda c: c.data == "generate_recipe")
async def handle_generate_recipe(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞"""
    await callback.answer()
    
    text = """
üç∏ *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –∫–æ–∫—Ç–µ–π–ª—è*

–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Ä—Ç:
"""
    
    keyboard = mixtrix_bot.get_base_spirit_keyboard()
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')

@dp.callback_query(lambda c: c.data.startswith("spirit_"))
async def handle_spirit_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–∏—Ä—Ç–∞"""
    await callback.answer()
    
    spirit = callback.data.replace("spirit_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_cache[callback.from_user.id] = {"base_spirit": spirit}
    
    text = f"""
üç∏ *–í—ã–±—Ä–∞–Ω –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Ä—Ç: {spirit}*

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–µ—Ü–µ–ø—Ç–∞:
"""
    
    keyboard = mixtrix_bot.get_difficulty_keyboard()
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')

@dp.callback_query(lambda c: c.data.startswith("difficulty_"))
async def handle_difficulty_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    await callback.answer()
    
    difficulty = callback.data.replace("difficulty_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if callback.from_user.id not in user_cache:
        user_cache[callback.from_user.id] = {}
    user_cache[callback.from_user.id]["difficulty"] = difficulty
    
    text = f"""
üç∏ *–°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty}*

–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω:
"""
    
    keyboard = mixtrix_bot.get_season_keyboard()
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')

@dp.callback_query(lambda c: c.data.startswith("season_"))
async def handle_season_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ–∑–æ–Ω–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞"""
    await callback.answer()
    
    season = callback.data.replace("season_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = user_cache.get(callback.from_user.id, {})
    base_spirit = user_data.get("base_spirit", "–¥–∂–∏–Ω –ª–æ–Ω–¥–æ–Ω—Å–∫–∏–π")
    difficulty = user_data.get("difficulty", "intermediate")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    await callback.message.edit_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ü–µ–ø—Ç...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤–∫—É—Å–∞
        flavor_profile = FlavorProfile(
            primary="citrus",
            secondary=["herbal", "fresh"],
            intensity="medium",
            acidity="high",
            sweetness="medium",
            bitterness="light"
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç
        recipe = await mixtrix_ai.generate_cocktail_recipe(
            base_spirit=base_spirit,
            flavor_profile=flavor_profile,
            difficulty=difficulty,
            season=season,
            food_pairing="—É—Å—Ç—Ä–∏—Ü—ã",
            target_audience="–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã"
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"""
üç∏ *{recipe['name']}*

*–ë–∞–∑–∞:* {recipe['base_spirit']}
*–°–µ–∑–æ–Ω:* {recipe['season'].title()}
*–°–ª–æ–∂–Ω–æ—Å—Ç—å:* {recipe['difficulty'].title()}

*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*
"""
        
        for ingredient, details in recipe['ingredients'].items():
            response += f"‚Ä¢ {ingredient}: {details['amount']} {details['unit']}\n"
        
        response += f"""
*–ú–µ—Ç–æ–¥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:*
{recipe['method']}

*–ë–æ–∫–∞–ª:* {recipe['glassware']}
*–ì–∞—Ä–Ω–∏—Ä:* {recipe['garnish']}

*–û–ø–∏—Å–∞–Ω–∏–µ:*
{recipe['description']}

*–§—É–¥–ø–µ–π—Ä–∏–Ω–≥:* {', '.join(recipe['food_pairings'])}

*–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:* {recipe['prep_time']} —Å–µ–∫
*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {recipe['cost_estimate']:.0f} —Ä—É–±
*–ú–∞—Ä–∂–∞:* {recipe['profit_margin']*100:.0f}%
"""
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç",
            callback_data=f"save_recipe_{recipe['id']}"
        ))
        builder.add(InlineKeyboardButton(
            text="üîÑ –ù–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç",
            callback_data="generate_recipe"
        ))
        
        await callback.message.edit_text(response, reply_markup=builder.as_markup(), parse_mode='Markdown')
        
    except Exception as e:
        error_text = f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {str(e)}"
        await callback.message.edit_text(error_text)

@dp.callback_query(lambda c: c.data == "horeca_news")
async def handle_horeca_news(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π HORECA"""
    await callback.answer()
    
    news_text = """
üì∞ *–ù–æ–≤–æ—Å—Ç–∏ HORECA –∏–Ω–¥—É—Å—Ç—Ä–∏–∏*

*–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã:*
‚Ä¢ –†–æ—Å—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Å–µ–∑–æ–Ω–Ω—ã—Ö –∫–æ–∫—Ç–µ–π–ª–µ–π
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
‚Ä¢ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏ —Å –¥–æ–±–∞–≤–∫–∞–º–∏
‚Ä¢ –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç—ã–µ –±–∞—Ä–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏

*–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—ã–Ω–æ–∫:*
‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏
‚Ä¢ –†–∞–∑–≤–∏—Ç–∏–µ –∫–æ–∫—Ç–µ–π–ª—å–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö
‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ä—É—Å—Å–∫–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (–æ–±–ª–µ–ø–∏—Ö–∞, —Ä–µ–≤–µ–Ω—å)

*–ò—Å—Ç–æ—á–Ω–∏–∫–∏:*
‚Ä¢ Difford's Guide
‚Ä¢ Imbibe Magazine
‚Ä¢ Bar Magazine
‚Ä¢ Cocktail Society

*–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞*
"""
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
        callback_data="horeca_news"
    ))
    builder.add(InlineKeyboardButton(
        text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="main_menu"
    ))
    
    await callback.message.edit_text(news_text, reply_markup=builder.as_markup(), parse_mode='Markdown')

@dp.callback_query(lambda c: c.data == "main_menu")
async def handle_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()
    
    user_id = callback.from_user.id
    user_role = mixtrix_bot.get_user_role(user_id)
    
    text = """
üç∏ *MIXTRIX Professional System*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    keyboard = mixtrix_bot.get_main_menu_keyboard(user_role)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')

@dp.message()
async def handle_text_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    user_role = mixtrix_bot.get_user_role(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–º –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º
    if any(keyword in message.text.lower() for keyword in ['–Ω–∞–π–¥–∏', '–ø–æ–∏—Å–∫', '—á—Ç–æ –º–æ–∂–Ω–æ', '–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã']):
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            ingredients_text = message.text.lower()
            
            # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
            for word in ['–Ω–∞–π–¥–∏', '–ø–æ–∏—Å–∫', '—á—Ç–æ –º–æ–∂–Ω–æ', '–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', '–∫–æ–∫—Ç–µ–π–ª–∏', '—Å', '–∏–∑']:
                ingredients_text = ingredients_text.replace(word, '')
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
            ingredients = [ing.strip() for ing in ingredients_text.replace(',', ' ').split() if ing.strip()]
            
            if ingredients:
                # –ò—â–µ–º –∫–æ–∫—Ç–µ–π–ª–∏ —Å —ç—Ç–∏–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
                conn = sqlite3.connect('mixtrix_professional.db')
                cursor = conn.cursor()
                
                found_cocktails = []
                for ingredient in ingredients:
                    cursor.execute("""
                        SELECT name, name_en, base_spirit, ingredients, description
                        FROM cocktails
                        WHERE ingredients LIKE ? OR name LIKE ? OR description LIKE ?
                        LIMIT 5
                    """, (f"%{ingredient}%", f"%{ingredient}%", f"%{ingredient}%"))
                    
                    for row in cursor.fetchall():
                        cocktail = {
                            "name": row[0],
                            "name_en": row[1],
                            "base_spirit": row[2],
                            "ingredients": json.loads(row[3]) if row[3] else {},
                            "description": row[4]
                        }
                        found_cocktails.append(cocktail)
                
                conn.close()
                
                if found_cocktails:
                    response = f"üç∏ *–ù–∞–π–¥–µ–Ω–æ –∫–æ–∫—Ç–µ–π–ª–µ–π —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏: {', '.join(ingredients)}*\n\n"
                    for cocktail in found_cocktails[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                        response += f"‚Ä¢ *{cocktail['name']}* ({cocktail['name_en']})\n"
                        response += f"  ü•É –ë–∞–∑–∞: {cocktail['base_spirit']}\n"
                        response += f"  üìù {cocktail['description'][:80]}...\n\n"
                    
                    response += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /seasonal –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–µ–∑–æ–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"
                else:
                    response = f"‚ùå –ö–æ–∫—Ç–µ–π–ª–∏ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏ '{', '.join(ingredients)}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                    response += "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    response += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /seasonal –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤\n"
                    response += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤\n"
                    response += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ª–∏–º–æ–Ω' –≤–º–µ—Å—Ç–æ '–ª–∞–π–º')"
                
                await message.reply(response, parse_mode='Markdown')
                return
            else:
                await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø—Ä–æ–±–µ–ª.")
                return
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–∫—Ç–µ–π–ª–µ–π.")
            return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ MIXTRIX —Å–∏—Å—Ç–µ–º—É
    response = await mixtrix_bot.mixtrix.process_user_request(
        user_id=user_id,
        message=message.text,
        user_role=user_role
    )
    
    await message.reply(response, parse_mode='Markdown')

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üç∏ –ó–∞–ø—É—Å–∫ MIXTRIX Professional Telegram Bot...")
    print("M - Mixology | I - Innovation | X - X-factor")
    print("T - Taste | R - Recipes | I - Ingredients | X - Xperience")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    await mixtrix_bot.initialize()
    
    print("‚úÖ MIXTRIX Professional System –≥–æ—Ç–æ–≤!")
    print("üì± Telegram Bot –∑–∞–ø—É—â–µ–Ω")
    print("üåç –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞")
    print("ü§ñ AI —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
    print("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
