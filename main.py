import os
import asyncio
import sqlite3
import requests
import configparser
import re
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('env_file.txt')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = configparser.ConfigParser()
config.read('config.ini', encoding='utf-8')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.get('Telegram', 'Token'))
dp = Dispatcher()

# –ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –µ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
BOT_NAME = "MIXTRIXüç∏"
BOT_DESCRIPTION = """
M - Mixology (–ú–∏–∫—Å–æ–ª–æ–≥–∏—è)
I - Innovation (–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏)
X - X-factor (–ò–∑—é–º–∏–Ω–∫–∞)
T - Taste (–í–∫—É—Å)
R - Recipes (–†–µ—Ü–µ–ø—Ç—ã)
I - Ingredients (–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã)
X - Xperience (–û–ø—ã—Ç)
"""

# –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –æ–∫—Ç—è–±—Ä—å 2025
SEASONAL_OCTOBER = ['–ì—Ä–∞–Ω–∞—Ç', '–ö–ª—é–∫–≤–∞', '–ê–π–≤–∞', '–ì—Ä—É—à–∞', '–Ø–±–ª–æ–∫–∏', '–ß–µ—Ä–Ω–æ–ø–ª–æ–¥–∫–∞', '–†—è–±–∏–Ω–∞']

# –ë–∞–∑–æ–≤—ã–µ —Å–ø–∏—Ä—Ç—ã
BASE_SPIRITS = ['–¥–∂–∏–Ω', '–≤–æ–¥–∫–∞', '—Ä–æ–º', '–≤–∏—Å–∫–∏', '—Ç–µ–∫–∏–ª–∞', '–∫–æ–Ω—å—è–∫', '–±—Ä–µ–Ω–¥–∏']

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_age_verified = {}

# –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ–º—ã (–ø–æ–ª–∏—Ç–∏–∫–∞ –∏ –¥—Ä—É–≥–∏–µ)
FORBIDDEN_TOPICS = [
    '–ø–æ–ª–∏—Ç–∏–∫–∞', '–ø–æ–ª–∏—Ç–∏–∫', '–≤—ã–±–æ—Ä—ã', '–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç', '–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–ø–∞—Ä—Ç–∏—è',
    '–¥–µ–ø—É—Ç–∞—Ç', '–º–∏–Ω–∏—Å—Ç—Ä', '–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ', '–≤–ª–∞—Å—Ç—å', '–æ–ø–ø–æ–∑–∏—Ü–∏—è', '—Ä–µ–≤–æ–ª—é—Ü–∏—è',
    '–ø—Ä–æ—Ç–µ—Å—Ç', '–º–∏—Ç–∏–Ω–≥', '–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è', '–∑–∞–±–∞—Å—Ç–æ–≤–∫–∞', '–±—É–Ω—Ç', '–ø–µ—Ä–µ–≤–æ—Ä–æ—Ç'
]

def is_age_verified(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_age_verified.get(user_id, False)

def contains_forbidden_content(text):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    text_lower = text.lower()
    return any(topic in text_lower for topic in FORBIDDEN_TOPICS)

def is_alcohol_related(text):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–≤—è–∑–∞–Ω –ª–∏ —Ç–µ–∫—Å—Ç —Å –∞–ª–∫–æ–≥–æ–ª–µ–º"""
    alcohol_keywords = [
        '–∞–ª–∫–æ–≥–æ–ª—å', '—Å–ø–∏—Ä—Ç', '–∫–æ–∫—Ç–µ–π–ª—å', '–Ω–∞–ø–∏—Ç–æ–∫', '–¥–∂–∏–Ω', '–≤–æ–¥–∫–∞', '—Ä–æ–º', 
        '–≤–∏—Å–∫–∏', '—Ç–µ–∫–∏–ª–∞', '–∫–æ–Ω—å—è–∫', '–±—Ä–µ–Ω–¥–∏', '–ª–∏–∫–µ—Ä', '–≤–µ—Ä–º—É—Ç', '—à–∞–º–ø–∞–Ω—Å–∫–æ–µ',
        '–≤–∏–Ω–æ', '–ø–∏–≤–æ', '—Å–∞–º–æ–≥–æ–Ω', '–∞–±—Å–µ–Ω—Ç', '—Ä–æ–º', '–≤–∏—Å–∫–∏', '–±—É—Ä–±–æ–Ω'
    ]
    text_lower = text.lower()
    return any(keyword in text_lower for keyword in alcohol_keywords)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –∏–∑ '–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è'"""
    conn = sqlite3.connect('cocktails.db')
    cursor = conn.cursor()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('DROP TABLE IF EXISTS recipes')
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    cursor.execute('''CREATE TABLE recipes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT UNIQUE,
        ingredients TEXT,
        method TEXT,
        base_spirit TEXT,
        category TEXT,
        source TEXT,
        description TEXT,
        glassware TEXT,
        garnish TEXT,
        difficulty TEXT,
        prep_time TEXT
    )''')
    
    # –†–µ—Ü–µ–ø—Ç—ã –∏–∑ "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è" - –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ
    classic_recipes = [
        ("Old Fashioned", "60 –º–ª –±—É—Ä–±–æ–Ω, 1 –∫—É–±–∏–∫ —Å–∞—Ö–∞—Ä–∞, 2 –¥—ç—à –±–∏—Ç—Ç–µ—Ä—Å –ê–Ω–≥–æ—Å—Ç—É—Ä–∞, –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤–∞—è —Ü–µ–¥—Ä–∞", "–°—Ç–∏—Ä —Å —Å–∞—Ö–∞—Ä–æ–º –∏ –±–∏—Ç—Ç–µ—Ä—Å, –¥–æ–±–∞–≤–∏—Ç—å –≤–∏—Å–∫–∏, –ø–æ–¥–∞—á–∞ –≤ —Ä–æ–∫—Å", "–≤–∏—Å–∫–∏", "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∫–æ–∫—Ç–µ–π–ª—å –Ω–∞ –≤–∏—Å–∫–∏ —Å –±–∏—Ç—Ç–µ—Ä—Å", "—Ä–æ–∫—Å", "–∞–ø–µ–ª—å—Å–∏–Ω–æ–≤–∞—è —Ü–µ–¥—Ä–∞", "–ª–µ–≥–∫–∏–π", "2 –º–∏–Ω"),
        ("Manhattan", "60 –º–ª —Ä–∂–∞–Ω–æ–π –≤–∏—Å–∫–∏, 30 –º–ª —Å–ª–∞–¥–∫–∏–π –≤–µ—Ä–º—É—Ç, 2 –¥—ç—à –±–∏—Ç—Ç–µ—Ä—Å –ê–Ω–≥–æ—Å—Ç—É—Ä–∞", "–°—Ç–∏—Ä —Å–æ –ª—å–¥–æ–º, –ø–æ–¥–∞—á–∞ –≤ –∫–æ–∫—Ç–µ–π–ª—å–Ω–æ–º –±–æ–∫–∞–ª–µ", "–≤–∏—Å–∫–∏", "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å –Ω–∞ –≤–∏—Å–∫–∏ —Å –≤–µ—Ä–º—É—Ç–æ–º", "–∫–æ–∫—Ç–µ–π–ª—å–Ω—ã–π", "–≤–∏—à–Ω—è –º–∞—Ä–∞—Å–∫–∏–Ω–æ", "—Å—Ä–µ–¥–Ω–∏–π", "3 –º–∏–Ω"),
        ("Martini", "60 –º–ª –¥–∂–∏–Ω, 10 –º–ª —Å—É—Ö–æ–π –≤–µ—Ä–º—É—Ç, –æ–ª–∏–≤–∫–∞ –∏–ª–∏ –ª–∏–º–æ–Ω–Ω–∞—è —Ü–µ–¥—Ä–∞", "–°—Ç–∏—Ä —Å–æ –ª—å–¥–æ–º, –ø–æ–¥–∞—á–∞ –≤ –∫–æ–∫—Ç–µ–π–ª—å–Ω–æ–º –±–æ–∫–∞–ª–µ", "–¥–∂–∏–Ω", "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –¥–∂–∏–Ω-–∫–æ–∫—Ç–µ–π–ª—å", "–∫–æ–∫—Ç–µ–π–ª—å–Ω—ã–π", "–æ–ª–∏–≤–∫–∞ –∏–ª–∏ –ª–∏–º–æ–Ω–Ω–∞—è —Ü–µ–¥—Ä–∞", "–ª–µ–≥–∫–∏–π", "2 –º–∏–Ω"),
        ("Negroni", "30 –º–ª –¥–∂–∏–Ω, 30 –º–ª –∫—Ä–∞—Å–Ω—ã–π –≤–µ—Ä–º—É—Ç, 30 –º–ª –ö–∞–º–ø–∞—Ä–∏", "–°—Ç–∏—Ä —Å–æ –ª—å–¥–æ–º, –ø–æ–¥–∞—á–∞ –≤ —Ä–æ–∫—Å", "–¥–∂–∏–Ω", "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–ì–æ—Ä—å–∫–∏–π –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π –∫–æ–∫—Ç–µ–π–ª—å", "—Ä–æ–∫—Å", "–∞–ø–µ–ª—å—Å–∏–Ω–æ–≤–∞—è —Ü–µ–¥—Ä–∞", "–ª–µ–≥–∫–∏–π", "2 –º–∏–Ω"),
        ("Daiquiri", "60 –º–ª –±–µ–ª—ã–π —Ä–æ–º, 30 –º–ª –ª–∞–π–º–æ–≤—ã–π —Å–æ–∫, 15 –º–ª —Å–∞—Ö–∞—Ä–Ω—ã–π —Å–∏—Ä–æ–ø", "–®–µ–π–∫ —Å–æ –ª—å–¥–æ–º, –ø–æ–¥–∞—á–∞ –≤ –∫–æ–∫—Ç–µ–π–ª—å–Ω–æ–º –±–æ–∫–∞–ª–µ", "—Ä–æ–º", "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–æ–º–æ–≤—ã–π –∫–æ–∫—Ç–µ–π–ª—å", "–∫–æ–∫—Ç–µ–π–ª—å–Ω—ã–π", "–ª–∞–π–º–æ–≤–∞—è —Ü–µ–¥—Ä–∞", "–ª–µ–≥–∫–∏–π", "2 –º–∏–Ω"),
        ("Margarita", "60 –º–ª —Ç–µ–∫–∏–ª–∞, 30 –º–ª –ª–∞–π–º–æ–≤—ã–π —Å–æ–∫, 20 –º–ª —Ç—Ä–∏–ø–ª —Å–µ–∫", "–®–µ–π–∫ —Å–æ –ª—å–¥–æ–º, –ø–æ–¥–∞—á–∞ –≤ —Ä–æ–∫—Å —Å —Å–æ–ª—å—é", "—Ç–µ–∫–∏–ª–∞", "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–µ–∫–∏–ª–∞-–∫–æ–∫—Ç–µ–π–ª—å", "—Ä–æ–∫—Å", "–ª–∞–π–º–æ–≤–∞—è –¥–æ–ª—å–∫–∞", "—Å—Ä–µ–¥–Ω–∏–π", "3 –º–∏–Ω"),
        ("Mojito", "60 –º–ª –±–µ–ª—ã–π —Ä–æ–º, 30 –º–ª –ª–∞–π–º–æ–≤—ã–π —Å–æ–∫, 20 –º–ª —Å–∞—Ö–∞—Ä–Ω—ã–π —Å–∏—Ä–æ–ø, 8 –ª–∏—Å—Ç—å–µ–≤ –º—è—Ç—ã, —Å–æ–¥–æ–≤–∞—è", "–ú—É–¥–ª –º—è—Ç—ã, –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –ø–æ–¥–∞—á–∞ –≤ —Ö–∞–π–±–æ–ª", "—Ä–æ–º", "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–û—Å–≤–µ–∂–∞—é—â–∏–π —Ä–æ–º–æ–≤—ã–π –∫–æ–∫—Ç–µ–π–ª—å", "—Ö–∞–π–±–æ–ª", "–º—è—Ç–∞ –∏ –ª–∞–π–º", "—Å—Ä–µ–¥–Ω–∏–π", "4 –º–∏–Ω"),
        ("Whiskey Sour", "60 –º–ª –≤–∏—Å–∫–∏, 30 –º–ª –ª–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫, 20 –º–ª —Å–∞—Ö–∞—Ä–Ω—ã–π —Å–∏—Ä–æ–ø, –±–µ–ª–æ–∫", "–®–µ–π–∫ —Å–æ –ª—å–¥–æ–º, –ø–æ–¥–∞—á–∞ –≤ —Ä–æ–∫—Å", "–≤–∏—Å–∫–∏", "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≤–∏—Å–∫–∏ —Å–∞—É—ç—Ä", "—Ä–æ–∫—Å", "–ª–∏–º–æ–Ω–Ω–∞—è —Ü–µ–¥—Ä–∞", "—Å—Ä–µ–¥–Ω–∏–π", "3 –º–∏–Ω"),
        ("Gin Fizz", "60 –º–ª –¥–∂–∏–Ω, 30 –º–ª –ª–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫, 20 –º–ª —Å–∞—Ö–∞—Ä–Ω—ã–π —Å–∏—Ä–æ–ø, –±–µ–ª–æ–∫, —Å–æ–¥–æ–≤–∞—è", "–®–µ–π–∫ —Å–æ –ª—å–¥–æ–º, –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–¥–æ–≤—É—é, –ø–æ–¥–∞—á–∞ –≤ —Ö–∞–π–±–æ–ª", "–¥–∂–∏–Ω", "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–û—Å–≤–µ–∂–∞—é—â–∏–π –¥–∂–∏–Ω-—Ñ–∏–∑–∑", "—Ö–∞–π–±–æ–ª", "–ª–∏–º–æ–Ω–Ω–∞—è —Ü–µ–¥—Ä–∞", "—Å—Ä–µ–¥–Ω–∏–π", "4 –º–∏–Ω"),
        ("Sidecar", "60 –º–ª –∫–æ–Ω—å—è–∫, 30 –º–ª –ª–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫, 20 –º–ª —Ç—Ä–∏–ø–ª —Å–µ–∫", "–®–µ–π–∫ —Å–æ –ª—å–¥–æ–º, –ø–æ–¥–∞—á–∞ –≤ –∫–æ–∫—Ç–µ–π–ª—å–Ω–æ–º –±–æ–∫–∞–ª–µ", "–∫–æ–Ω—å—è–∫", "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—å—è—á–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å", "–∫–æ–∫—Ç–µ–π–ª—å–Ω—ã–π", "—Å–∞—Ö–∞—Ä–Ω—ã–π –æ–±–æ–¥–æ–∫", "—Å—Ä–µ–¥–Ω–∏–π", "3 –º–∏–Ω")
    ]
    
    # –†–µ—Ü–µ–ø—Ç—ã –∏–∑ "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è" - –ê–≤—Ç–æ—Ä—Å–∫–∏–µ
    signature_recipes = [
        ("Penicillin", "60 –º–ª —à–æ—Ç–ª–∞–Ω–¥—Å–∫–∏–π –≤–∏—Å–∫–∏, 20 –º–ª –ª–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫, 20 –º–ª –º–µ–¥–æ–≤—ã–π —Å–∏—Ä–æ–ø, 2 –¥—ç—à –±–∏—Ç—Ç–µ—Ä—Å –ê–Ω–≥–æ—Å—Ç—É—Ä–∞, 10 –º–ª –∏–º–±–∏—Ä–Ω—ã–π —Å–∏—Ä–æ–ø", "–®–µ–π–∫ —Å–æ –ª—å–¥–æ–º, –ø–æ–¥–∞—á–∞ –≤ —Ä–æ–∫—Å", "–≤–∏—Å–∫–∏", "–∞–≤—Ç–æ—Ä—Å–∫–∏–π", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–ê–≤—Ç–æ—Ä—Å–∫–∏–π –∫–æ–∫—Ç–µ–π–ª—å —Å –∏–º–±–∏—Ä–µ–º –∏ –º–µ–¥–æ–º", "—Ä–æ–∫—Å", "–∏–º–±–∏—Ä—å", "—Å–ª–æ–∂–Ω—ã–π", "5 –º–∏–Ω"),
        ("Last Word", "30 –º–ª –¥–∂–∏–Ω, 30 –º–ª –∑–µ–ª–µ–Ω—ã–π —à–∞—Ä—Ç—Ä–µ–∑, 30 –º–ª –ª–∞–π–º–æ–≤—ã–π —Å–æ–∫, 30 –º–ª –º–∞—Ä–∞—Å–∫–∏–Ω–æ", "–®–µ–π–∫ —Å–æ –ª—å–¥–æ–º, –ø–æ–¥–∞—á–∞ –≤ –∫–æ–∫—Ç–µ–π–ª—å–Ω–æ–º –±–æ–∫–∞–ª–µ", "–¥–∂–∏–Ω", "–∞–≤—Ç–æ—Ä—Å–∫–∏–π", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–°–ª–æ–∂–Ω—ã–π –∞–≤—Ç–æ—Ä—Å–∫–∏–π –∫–æ–∫—Ç–µ–π–ª—å", "–∫–æ–∫—Ç–µ–π–ª—å–Ω—ã–π", "–≤–∏—à–Ω—è", "—Å–ª–æ–∂–Ω—ã–π", "4 –º–∏–Ω"),
        ("Corpse Reviver #2", "30 –º–ª –¥–∂–∏–Ω, 30 –º–ª –ª–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫, 30 –º–ª —Ç—Ä–∏–ø–ª —Å–µ–∫, 30 –º–ª –õ–∏–ª—å–µ –ë–ª–∞–Ω, 1 –¥—ç—à –∞–±—Å–µ–Ω—Ç", "–®–µ–π–∫ —Å–æ –ª—å–¥–æ–º, –ø–æ–¥–∞—á–∞ –≤ –∫–æ–∫—Ç–µ–π–ª—å–Ω–æ–º –±–æ–∫–∞–ª–µ", "–¥–∂–∏–Ω", "–∞–≤—Ç–æ—Ä—Å–∫–∏–π", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–ê–≤—Ç–æ—Ä—Å–∫–∏–π –∫–æ–∫—Ç–µ–π–ª—å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", "–∫–æ–∫—Ç–µ–π–ª—å–Ω—ã–π", "–ª–∏–º–æ–Ω–Ω–∞—è —Ü–µ–¥—Ä–∞", "—Å–ª–æ–∂–Ω—ã–π", "4 –º–∏–Ω"),
        ("Aviation", "60 –º–ª –¥–∂–∏–Ω, 15 –º–ª –ª–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫, 15 –º–ª –º–∞—Ä–∞—Å–∫–∏–Ω–æ, 1 –¥—ç—à –∫—Ä–µ–º –¥–µ –≤–∏–æ–ª–µ—Ç—Ç", "–®–µ–π–∫ —Å–æ –ª—å–¥–æ–º, –ø–æ–¥–∞—á–∞ –≤ –∫–æ–∫—Ç–µ–π–ª—å–Ω–æ–º –±–æ–∫–∞–ª–µ", "–¥–∂–∏–Ω", "–∞–≤—Ç–æ—Ä—Å–∫–∏–π", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä—Å–∫–∏–π –∫–æ–∫—Ç–µ–π–ª—å", "–∫–æ–∫—Ç–µ–π–ª—å–Ω—ã–π", "–≤–∏—à–Ω—è", "—Å–ª–æ–∂–Ω—ã–π", "4 –º–∏–Ω"),
        ("Boulevardier", "60 –º–ª –±—É—Ä–±–æ–Ω, 30 –º–ª –∫—Ä–∞—Å–Ω—ã–π –≤–µ—Ä–º—É—Ç, 30 –º–ª –ö–∞–º–ø–∞—Ä–∏", "–°—Ç–∏—Ä —Å–æ –ª—å–¥–æ–º, –ø–æ–¥–∞—á–∞ –≤ —Ä–æ–∫—Å", "–≤–∏—Å–∫–∏", "–∞–≤—Ç–æ—Ä—Å–∫–∏–π", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–ê–≤—Ç–æ—Ä—Å–∫–∏–π –≤–∏—Å–∫–∏-–Ω–µ–≥—Ä–æ–Ω–∏", "—Ä–æ–∫—Å", "–∞–ø–µ–ª—å—Å–∏–Ω–æ–≤–∞—è —Ü–µ–¥—Ä–∞", "—Å—Ä–µ–¥–Ω–∏–π", "3 –º–∏–Ω"),
        ("Paper Plane", "30 –º–ª –±—É—Ä–±–æ–Ω, 30 –º–ª –∞–º–∞—Ä–æ, 30 –º–ª –ª–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫, 30 –º–ª –∞–ø–µ—Ä–æ–ª—å", "–®–µ–π–∫ —Å–æ –ª—å–¥–æ–º, –ø–æ–¥–∞—á–∞ –≤ –∫–æ–∫—Ç–µ–π–ª—å–Ω–æ–º –±–æ–∫–∞–ª–µ", "–≤–∏—Å–∫–∏", "–∞–≤—Ç–æ—Ä—Å–∫–∏–π", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–≤—Ç–æ—Ä—Å–∫–∏–π –∫–æ–∫—Ç–µ–π–ª—å", "–∫–æ–∫—Ç–µ–π–ª—å–Ω—ã–π", "–ª–∏–º–æ–Ω–Ω–∞—è —Ü–µ–¥—Ä–∞", "—Å–ª–æ–∂–Ω—ã–π", "4 –º–∏–Ω"),
        ("Jungle Bird", "60 –º–ª —Ç–µ–º–Ω—ã–π —Ä–æ–º, 30 –º–ª –ª–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫, 20 –º–ª —Å–∞—Ö–∞—Ä–Ω—ã–π —Å–∏—Ä–æ–ø, 45 –º–ª –∞–Ω–∞–Ω–∞—Å–æ–≤—ã–π —Å–æ–∫, 15 –º–ª –ö–∞–º–ø–∞—Ä–∏", "–®–µ–π–∫ —Å–æ –ª—å–¥–æ–º, –ø–æ–¥–∞—á–∞ –≤ —Ä–æ–∫—Å", "—Ä–æ–º", "–∞–≤—Ç–æ—Ä—Å–∫–∏–π", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –∞–≤—Ç–æ—Ä—Å–∫–∏–π –∫–æ–∫—Ç–µ–π–ª—å", "—Ä–æ–∫—Å", "–∞–Ω–∞–Ω–∞—Å", "—Å—Ä–µ–¥–Ω–∏–π", "4 –º–∏–Ω"),
        ("Naked & Famous", "30 –º–ª –º–µ—Å–∫–∞–ª—å, 30 –º–ª –∂–µ–ª—Ç—ã–π —à–∞—Ä—Ç—Ä–µ–∑, 30 –º–ª –∞–ø–µ—Ä–æ–ª—å, 30 –º–ª –ª–∞–π–º–æ–≤—ã–π —Å–æ–∫", "–®–µ–π–∫ —Å–æ –ª—å–¥–æ–º, –ø–æ–¥–∞—á–∞ –≤ –∫–æ–∫—Ç–µ–π–ª—å–Ω–æ–º –±–æ–∫–∞–ª–µ", "—Ç–µ–∫–∏–ª–∞", "–∞–≤—Ç–æ—Ä—Å–∫–∏–π", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–ê–≤—Ç–æ—Ä—Å–∫–∏–π –º–µ—Å–∫–∞–ª—å-–∫–æ–∫—Ç–µ–π–ª—å", "–∫–æ–∫—Ç–µ–π–ª—å–Ω—ã–π", "–ª–∞–π–º–æ–≤–∞—è —Ü–µ–¥—Ä–∞", "—Å–ª–æ–∂–Ω—ã–π", "4 –º–∏–Ω"),
        ("Trinidad Sour", "60 –º–ª –∞–Ω–¥–∂–µ–ª—Å —ç–Ω–≤–∏, 30 –º–ª –ª–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫, 30 –º–ª –æ—Ä–∂, 7 –¥—ç—à –±–∏—Ç—Ç–µ—Ä—Å –ê–Ω–≥–æ—Å—Ç—É—Ä–∞", "–®–µ–π–∫ —Å–æ –ª—å–¥–æ–º, –ø–æ–¥–∞—á–∞ –≤ –∫–æ–∫—Ç–µ–π–ª—å–Ω–æ–º –±–æ–∫–∞–ª–µ", "—Ä–æ–º", "–∞–≤—Ç–æ—Ä—Å–∫–∏–π", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–ù–µ–æ–±—ã—á–Ω—ã–π –∞–≤—Ç–æ—Ä—Å–∫–∏–π –∫–æ–∫—Ç–µ–π–ª—å", "–∫–æ–∫—Ç–µ–π–ª—å–Ω—ã–π", "–ª–∏–º–æ–Ω–Ω–∞—è —Ü–µ–¥—Ä–∞", "—Å–ª–æ–∂–Ω—ã–π", "4 –º–∏–Ω"),
        ("Industry Sour", "30 –º–ª –∑–µ–ª–µ–Ω—ã–π —à–∞—Ä—Ç—Ä–µ–∑, 30 –º–ª —Ñ–µ—Ä–Ω–µ—Ç-–±—Ä–∞–Ω–∫–∞, 30 –º–ª –ª–∞–π–º–æ–≤—ã–π —Å–æ–∫, 30 –º–ª —Å–∏—Ä–æ–ø –¥–µ–º–µ—Ä–∞—Ä–∞", "–®–µ–π–∫ —Å–æ –ª—å–¥–æ–º, –ø–æ–¥–∞—á–∞ –≤ –∫–æ–∫—Ç–µ–π–ª—å–Ω–æ–º –±–æ–∫–∞–ª–µ", "–ª–∏–∫–µ—Ä", "–∞–≤—Ç–æ—Ä—Å–∫–∏–π", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–ì–æ—Ä—å–∫–∏–π –∞–≤—Ç–æ—Ä—Å–∫–∏–π –∫–æ–∫—Ç–µ–π–ª—å", "–∫–æ–∫—Ç–µ–π–ª—å–Ω—ã–π", "–ª–∞–π–º–æ–≤–∞—è —Ü–µ–¥—Ä–∞", "—Å–ª–æ–∂–Ω—ã–π", "4 –º–∏–Ω")
    ]
    
    # –†–µ—Ü–µ–ø—Ç—ã –ø—Ä–∏–º–∏–∫—Å–æ–≤ –∏ –∑–∞–≥–æ—Ç–æ–≤–æ–∫
    premix_recipes = [
        ("Simple Syrup", "1 —á–∞—Å—Ç—å —Å–∞—Ö–∞—Ä–∞, 1 —á–∞—Å—Ç—å –≤–æ–¥—ã", "–ù–∞–≥—Ä–µ—Ç—å –≤–æ–¥—É, —Ä–∞—Å—Ç–≤–æ—Ä–∏—Ç—å —Å–∞—Ö–∞—Ä, –æ—Ö–ª–∞–¥–∏—Ç—å", "—Å–∏—Ä–æ–ø", "–ø—Ä–∏–º–∏–∫—Å", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–ë–∞–∑–æ–≤—ã–π —Å–∞—Ö–∞—Ä–Ω—ã–π —Å–∏—Ä–æ–ø", "–±—É—Ç—ã–ª–∫–∞", "–Ω–µ—Ç", "–ª–µ–≥–∫–∏–π", "10 –º–∏–Ω"),
        ("Grenadine", "1 —á–∞—Å—Ç—å –≥—Ä–∞–Ω–∞—Ç–æ–≤—ã–π —Å–æ–∫, 1 —á–∞—Å—Ç—å —Å–∞—Ö–∞—Ä–∞", "–ù–∞–≥—Ä–µ—Ç—å —Å–æ–∫, —Ä–∞—Å—Ç–≤–æ—Ä–∏—Ç—å —Å–∞—Ö–∞—Ä, –æ—Ö–ª–∞–¥–∏—Ç—å", "—Å–∏—Ä–æ–ø", "–ø—Ä–∏–º–∏–∫—Å", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–ì—Ä–∞–Ω–∞—Ç–æ–≤—ã–π —Å–∏—Ä–æ–ø", "–±—É—Ç—ã–ª–∫–∞", "–Ω–µ—Ç", "–ª–µ–≥–∫–∏–π", "15 –º–∏–Ω"),
        ("Orgeat", "1 —á–∞—Å—Ç—å –º–∏–Ω–¥–∞–ª—å–Ω–æ–µ –º–æ–ª–æ–∫–æ, 1 —á–∞—Å—Ç—å —Å–∞—Ö–∞—Ä–∞, 1 –¥—ç—à –º–∏–Ω–¥–∞–ª—å–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç", "–°–º–µ—à–∞—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –ø—Ä–æ—Ü–µ–¥–∏—Ç—å", "—Å–∏—Ä–æ–ø", "–ø—Ä–∏–º–∏–∫—Å", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–ú–∏–Ω–¥–∞–ª—å–Ω—ã–π —Å–∏—Ä–æ–ø", "–±—É—Ç—ã–ª–∫–∞", "–Ω–µ—Ç", "—Å—Ä–µ–¥–Ω–∏–π", "20 –º–∏–Ω"),
        ("Honey Syrup", "1 —á–∞—Å—Ç—å –º–µ–¥, 1 —á–∞—Å—Ç—å —Ç–µ–ø–ª–∞—è –≤–æ–¥–∞", "–°–º–µ—à–∞—Ç—å –º–µ–¥ —Å —Ç–µ–ø–ª–æ–π –≤–æ–¥–æ–π", "—Å–∏—Ä–æ–ø", "–ø—Ä–∏–º–∏–∫—Å", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–ú–µ–¥–æ–≤—ã–π —Å–∏—Ä–æ–ø", "–±—É—Ç—ã–ª–∫–∞", "–Ω–µ—Ç", "–ª–µ–≥–∫–∏–π", "5 –º–∏–Ω"),
        ("Ginger Syrup", "1 —á–∞—Å—Ç—å –∏–º–±–∏—Ä—å, 1 —á–∞—Å—Ç—å —Å–∞—Ö–∞—Ä–∞, 1 —á–∞—Å—Ç—å –≤–æ–¥—ã", "–ù–∞—Ç–µ—Ä–µ—Ç—å –∏–º–±–∏—Ä—å, —Å–º–µ—à–∞—Ç—å —Å —Å–∞—Ö–∞—Ä–æ–º –∏ –≤–æ–¥–æ–π, –ø—Ä–æ—Ü–µ–¥–∏—Ç—å", "—Å–∏—Ä–æ–ø", "–ø—Ä–∏–º–∏–∫—Å", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–ò–º–±–∏—Ä–Ω—ã–π —Å–∏—Ä–æ–ø", "–±—É—Ç—ã–ª–∫–∞", "–Ω–µ—Ç", "—Å—Ä–µ–¥–Ω–∏–π", "30 –º–∏–Ω"),
        ("Cinnamon Syrup", "1 —á–∞—Å—Ç—å –∫–æ—Ä–∏—Ü–∞, 1 —á–∞—Å—Ç—å —Å–∞—Ö–∞—Ä–∞, 1 —á–∞—Å—Ç—å –≤–æ–¥—ã", "–ù–∞–≥—Ä–µ—Ç—å –≤–æ–¥—É —Å –∫–æ—Ä–∏—Ü–µ–π, —Ä–∞—Å—Ç–≤–æ—Ä–∏—Ç—å —Å–∞—Ö–∞—Ä", "—Å–∏—Ä–æ–ø", "–ø—Ä–∏–º–∏–∫—Å", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–ö–æ—Ä–∏—á–Ω—ã–π —Å–∏—Ä–æ–ø", "–±—É—Ç—ã–ª–∫–∞", "–Ω–µ—Ç", "–ª–µ–≥–∫–∏–π", "15 –º–∏–Ω"),
        ("Lavender Syrup", "1 —á–∞—Å—Ç—å –ª–∞–≤–∞–Ω–¥–∞, 1 —á–∞—Å—Ç—å —Å–∞—Ö–∞—Ä–∞, 1 —á–∞—Å—Ç—å –≤–æ–¥—ã", "–ù–∞–≥—Ä–µ—Ç—å –≤–æ–¥—É —Å –ª–∞–≤–∞–Ω–¥–æ–π, —Ä–∞—Å—Ç–≤–æ—Ä–∏—Ç—å —Å–∞—Ö–∞—Ä", "—Å–∏—Ä–æ–ø", "–ø—Ä–∏–º–∏–∫—Å", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–õ–∞–≤–∞–Ω–¥–æ–≤—ã–π —Å–∏—Ä–æ–ø", "–±—É—Ç—ã–ª–∫–∞", "–Ω–µ—Ç", "—Å—Ä–µ–¥–Ω–∏–π", "20 –º–∏–Ω"),
        ("Rose Syrup", "1 —á–∞—Å—Ç—å –ª–µ–ø–µ—Å—Ç–∫–∏ —Ä–æ–∑, 1 —á–∞—Å—Ç—å —Å–∞—Ö–∞—Ä–∞, 1 —á–∞—Å—Ç—å –≤–æ–¥—ã", "–ù–∞–≥—Ä–µ—Ç—å –≤–æ–¥—É —Å –ª–µ–ø–µ—Å—Ç–∫–∞–º–∏, —Ä–∞—Å—Ç–≤–æ—Ä–∏—Ç—å —Å–∞—Ö–∞—Ä", "—Å–∏—Ä–æ–ø", "–ø—Ä–∏–º–∏–∫—Å", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–†–æ–∑–æ–≤—ã–π —Å–∏—Ä–æ–ø", "–±—É—Ç—ã–ª–∫–∞", "–Ω–µ—Ç", "—Å—Ä–µ–¥–Ω–∏–π", "25 –º–∏–Ω"),
        ("Vanilla Syrup", "1 —á–∞—Å—Ç—å –≤–∞–Ω–∏–ª—å, 1 —á–∞—Å—Ç—å —Å–∞—Ö–∞—Ä–∞, 1 —á–∞—Å—Ç—å –≤–æ–¥—ã", "–ù–∞–≥—Ä–µ—Ç—å –≤–æ–¥—É —Å –≤–∞–Ω–∏–ª—å—é, —Ä–∞—Å—Ç–≤–æ—Ä–∏—Ç—å —Å–∞—Ö–∞—Ä", "—Å–∏—Ä–æ–ø", "–ø—Ä–∏–º–∏–∫—Å", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–í–∞–Ω–∏–ª—å–Ω—ã–π —Å–∏—Ä–æ–ø", "–±—É—Ç—ã–ª–∫–∞", "–Ω–µ—Ç", "–ª–µ–≥–∫–∏–π", "15 –º–∏–Ω"),
        ("Demerara Syrup", "1 —á–∞—Å—Ç—å –¥–µ–º–µ—Ä–∞—Ä–∞ —Å–∞—Ö–∞—Ä, 1 —á–∞—Å—Ç—å –≤–æ–¥—ã", "–ù–∞–≥—Ä–µ—Ç—å –≤–æ–¥—É, —Ä–∞—Å—Ç–≤–æ—Ä–∏—Ç—å —Å–∞—Ö–∞—Ä, –æ—Ö–ª–∞–¥–∏—Ç—å", "—Å–∏—Ä–æ–ø", "–ø—Ä–∏–º–∏–∫—Å", "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è", "–°–∏—Ä–æ–ø –∏–∑ –¥–µ–º–µ—Ä–∞—Ä–∞ —Å–∞—Ö–∞—Ä–∞", "–±—É—Ç—ã–ª–∫–∞", "–Ω–µ—Ç", "–ª–µ–≥–∫–∏–π", "10 –º–∏–Ω")
    ]
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã
    all_recipes = classic_recipes + signature_recipes + premix_recipes
    
    cursor.executemany("INSERT OR IGNORE INTO recipes (name, ingredients, method, base_spirit, category, source, description, glassware, garnish, difficulty, prep_time) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", all_recipes)
    conn.commit()
    conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
init_database()

async def call_yandex_api(prompt: str) -> str:
    """–í—ã–∑–æ–≤ Yandex Cloud AI API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    api_key = config.get('YandexGPT', 'SecretKey')
    folder_id = config.get('YandexGPT', 'CatalogID')
    model = config.get('YandexGPT', 'ChatModel')
    temperature = config.getfloat('YandexGPT', 'Temperature')
    max_tokens = config.getint('YandexGPT', 'MaxTokens')
    
    headers = {
        "Authorization": f"Api-Key {api_key}",
        "Content-Type": "application/json"
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª
    safe_prompt = f"""
    {prompt}
    
    –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–º—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫—É–ª–∏–Ω–∞—Ä–∏–µ–π –∏ –Ω–∞–ø–∏—Ç–∫–∞–º–∏. 
    –ò–∑–±–µ–≥–∞–π –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∞–ª–∫–æ–≥–æ–ª—è –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –≤–æ–∑—Ä–∞—Å—Ç–µ.
    –ù–µ –æ–±—Å—É–∂–¥–∞–π –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã.
    –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –≤–∫—É—Å–æ–≤—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏—è—Ö, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞—Ö –∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö —Ç—Ä–∞–¥–∏—Ü–∏—è—Ö.
    """
    
    data = {
        "modelUri": model,
        "completionOptions": {
            "stream": False,
            "temperature": temperature,
            "maxTokens": max_tokens
        },
        "messages": [
            {
                "role": "user",
                "text": safe_prompt
            }
        ]
    }
    
    try:
        response = requests.post("https://llm.api.cloud.yandex.net/foundationModels/v1/completion", headers=headers, json=data)
        response.raise_for_status()
        result = response.json()
        
        if 'result' in result and 'alternatives' in result['result']:
            return result['result']['alternatives'][0]['message']['text']
        else:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å."
            
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {str(e)}"

@dp.message(Command('start'))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    user_id = message.from_user.id
    
    if not is_age_verified(user_id):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ú–Ω–µ 18+ –ª–µ—Ç", callback_data="age_verify_yes"),
                InlineKeyboardButton(text="‚ùå –ú–Ω–µ –º–µ–Ω—å—à–µ 18", callback_data="age_verify_no")
            ]
        ])
        
        await message.reply(
            f"üç∏ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {BOT_NAME}!**\n\n"
            f"**{BOT_DESCRIPTION}**\n\n"
            f"‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–∏—Ç–∫–∞—Ö, –≤–∫–ª—é—á–∞—è –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        return
    
    # –ï—Å–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(message)

async def show_main_menu(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üç∏ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data="recipe"),
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="search")
        ],
        [
            InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω—ã–π", callback_data="random"),
            InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="menu")
        ],
        [
            InlineKeyboardButton(text="üçÇ –°–µ–∑–æ–Ω–Ω—ã–µ", callback_data="seasonal"),
            InlineKeyboardButton(text="üçΩÔ∏è –§—É–¥–ø–µ–π—Ä–∏–Ω–≥", callback_data="pairing")
        ],
        [
            InlineKeyboardButton(text="üìà –¢—Ä–µ–Ω–¥—ã", callback_data="trends"),
            InlineKeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="news")
        ],
        [
            InlineKeyboardButton(text="üìã –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules"),
            InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ])
    
    welcome_text = f"""
üç∏ **{BOT_NAME}** - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–∏–∫—Å–æ–ª–æ–≥!

{BOT_DESCRIPTION}

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤! –Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç —Å —É—á–µ—Ç–æ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ (–æ–∫—Ç—è–±—Ä—å 2025)
‚Ä¢ –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º –∏ –±–∞–∑–æ–≤—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
‚Ä¢ –ü–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∞–ø–∏—Ç–æ–∫ –ø–æ–¥ –≤–∞—à–µ –±–ª—é–¥–æ
‚Ä¢ –£–∑–Ω–∞—Ç—å –æ —Ç—Ä–µ–Ω–¥–∞—Ö –∏ –Ω–æ–≤–æ—Å—Ç—è—Ö –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–µ –º–µ–Ω—é

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/recipe [–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç] - —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç
/search [–∑–∞–ø—Ä–æ—Å] - –ø–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤
/random - —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç
/seasonal - —Å–µ–∑–æ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã (–æ–∫—Ç—è–±—Ä—å)
/pairing [–±–ª—é–¥–æ] - –ø–æ–¥–±–æ—Ä –ø–æ–¥ –±–ª—é–¥–æ
/menu [—Ç–∏–ø] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é
/rules - –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
/examples - –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

**–°–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –æ–∫—Ç—è–±—Ä—è:**
–ì—Ä–∞–Ω–∞—Ç, –ö–ª—é–∫–≤–∞, –ê–π–≤–∞, –ì—Ä—É—à–∞, –Ø–±–ª–æ–∫–∏, –ß–µ—Ä–Ω–æ–ø–ª–æ–¥–∫–∞, –†—è–±–∏–Ω–∞

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã!
    """
    
    await message.reply(welcome_text, reply_markup=keyboard, parse_mode='Markdown')

@dp.message(Command('rules'))
async def rules_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rules"""
    rules_text = f"""
üìã **–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è {BOT_NAME}**

**üîû –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 18+ –ª–µ—Ç
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–∞—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–º
‚Ä¢ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –º–µ—Å—Ç–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ª–µ–∂–∏—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

**üö´ –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ–º—ã:**
‚Ä¢ –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
‚Ä¢ –ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤
‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç, –Ω–∞—Ä—É—à–∞—é—â–∏–π –∑–∞–∫–æ–Ω—ã –†–§
‚Ä¢ –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è

**‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–µ–º—ã:**
‚Ä¢ –ö—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏ —Ç–µ—Ö–Ω–∏–∫–∏
‚Ä¢ –í–∫—É—Å–æ–≤—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è –∏ —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥
‚Ä¢ –°–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
‚Ä¢ –ö—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è
‚Ä¢ –ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –≤ –∫—É–ª–∏–Ω–∞—Ä–∏–∏

**üç∏ –û –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–∞—Ö:**
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –º–µ—Å—Ç–Ω–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ
‚Ä¢ –ù–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –∞–ª–∫–æ–≥–æ–ª–µ–º

**üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ –ù–µ –¥–µ–ª–∏—Ç–µ—Å—å –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ Telegram

**üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ü—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª –±–æ—Ç –º–æ–∂–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.
    """
    await message.reply(rules_text, parse_mode='Markdown')

@dp.message(Command('examples'))
async def examples_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /examples"""
    examples_text = f"""
üìö **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è {BOT_NAME}**

**üç∏ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤:**
‚Ä¢ `/recipe –¥–∂–∏–Ω` - —Ä–µ—Ü–µ–ø—Ç —Å –¥–∂–∏–Ω–æ–º
‚Ä¢ `/recipe —è–±–ª–æ–∫–∏` - —Ä–µ—Ü–µ–ø—Ç —Å —è–±–ª–æ–∫–∞–º–∏
‚Ä¢ `/recipe —Å–µ–∑–æ–Ω–Ω—ã–π` - —Å–µ–∑–æ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç

**üîç –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤:**
‚Ä¢ `/search Manhattan` - –Ω–∞–π—Ç–∏ Manhattan
‚Ä¢ `/search –¥–∂–∏–Ω` - —Ä–µ—Ü–µ–ø—Ç—ã —Å –¥–∂–∏–Ω–æ–º
‚Ä¢ `/search –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π` - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã
‚Ä¢ `/search –∞–≤—Ç–æ—Ä—Å–∫–∏–π` - –∞–≤—Ç–æ—Ä—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã
‚Ä¢ `/search –ø—Ä–∏–º–∏–∫—Å` - –ø—Ä–∏–º–∏–∫—Å—ã –∏ —Å–∏—Ä–æ–ø—ã
‚Ä¢ `/iba_search Manhattan` - –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ IBA

**üìö –ö–æ–ª–ª–µ–∫—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤:**
‚Ä¢ `/classic` - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è"
‚Ä¢ `/signature` - –∞–≤—Ç–æ—Ä—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã
‚Ä¢ `/premix` - –ø—Ä–∏–º–∏–∫—Å—ã –∏ —Å–∏—Ä–æ–ø—ã
‚Ä¢ `/iba` - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã IBA
‚Ä¢ `/iba_classic` - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã IBA
‚Ä¢ `/bible` - —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ "–ë–∏–±–ª–∏—è –±–∞—Ä–º–µ–Ω–∞"
‚Ä¢ `/aperitif` - —Ä–µ—Ü–µ–ø—Ç—ã –∞–ø–µ—Ä–∏—Ç–∏–≤–æ–≤
‚Ä¢ `/theory` - —Ç–µ–æ—Ä–∏—è –±–∞—Ä–º–µ–Ω—Å—Ç–≤–∞
‚Ä¢ `/preparation` - —Ä–µ—Ü–µ–ø—Ç—ã –∑–∞–≥–æ—Ç–æ–≤–æ–∫
‚Ä¢ `/techniques` - —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
‚Ä¢ `/syrups` - —Ä–µ—Ü–µ–ø—Ç—ã —Å–∏—Ä–æ–ø–æ–≤
‚Ä¢ `/extended` - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
‚Ä¢ `/molecular` - –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏
‚Ä¢ `/scientific` - –Ω–∞—É—á–Ω—ã–µ –∑–∞–≥–æ—Ç–æ–≤–∫–∏
‚Ä¢ `/liquid_intelligence` - –Ω–∞—É—á–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏
‚Ä¢ `/flavor_principles` - –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞
‚Ä¢ `/flavor_combinations` - —Å–æ—á–µ—Ç–∞–Ω–∏—è –≤–∫—É—Å–æ–≤
‚Ä¢ `/seasonal_pairings` - —Å–µ–∑–æ–Ω–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è
‚Ä¢ `/cocktail_pairings` - —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥ –¥–ª—è –∫–æ–∫—Ç–µ–π–ª–µ–π
‚Ä¢ `/el_copitas` - –∞–≤—Ç–æ—Ä—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã El Copitas Bar

**üìñ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:**
‚Ä¢ `/recipe_detail Manhattan` - –ø–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç Manhattan
‚Ä¢ `/recipe_detail Old Fashioned` - –¥–µ—Ç–∞–ª–∏ Old Fashioned
‚Ä¢ `/recipe_detail Penicillin` - –∞–≤—Ç–æ—Ä—Å–∫–∏–π Penicillin

**üé≤ –°–ª—É—á–∞–π–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:**
‚Ä¢ `/random` - —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç
‚Ä¢ `/seasonal` - —Å–µ–∑–æ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã

**üçΩÔ∏è –§—É–¥–ø–µ–π—Ä–∏–Ω–≥:**
‚Ä¢ `/pairing —Å—Ç–µ–π–∫` - –Ω–∞–ø–∏—Ç–æ–∫ –∫ —Å—Ç–µ–π–∫—É
‚Ä¢ `/pairing –¥–µ—Å–µ—Ä—Ç` - –Ω–∞–ø–∏—Ç–æ–∫ –∫ –¥–µ—Å–µ—Ä—Ç—É
‚Ä¢ `/pairing —Å—ã—Ä` - –Ω–∞–ø–∏—Ç–æ–∫ –∫ —Å—ã—Ä—É

**üìã –ú–µ–Ω—é:**
‚Ä¢ `/menu seasonal 5` - —Å–µ–∑–æ–Ω–Ω–æ–µ –º–µ–Ω—é –∏–∑ 5 —Ä–µ—Ü–µ–ø—Ç–æ–≤
‚Ä¢ `/menu conceptual 3` - –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é

**üí¨ –°–≤–æ–±–æ–¥–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:**
‚Ä¢ "–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç —Å –º—è—Ç–æ–π –∏ –ª–∞–π–º–æ–º"
‚Ä¢ "–ß—Ç–æ –ø–æ–¥–æ–π–¥–µ—Ç –∫ —à–æ–∫–æ–ª–∞–¥–Ω–æ–º—É –¥–µ—Å–µ—Ä—Ç—É?"
‚Ä¢ "–ù—É–∂–µ–Ω –æ—Å–≤–µ–∂–∞—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è –ª–µ—Ç–∞"

**üçÇ –°–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–æ–∫—Ç—è–±—Ä—å):**
–ì—Ä–∞–Ω–∞—Ç, –ö–ª—é–∫–≤–∞, –ê–π–≤–∞, –ì—Ä—É—à–∞, –Ø–±–ª–æ–∫–∏, –ß–µ—Ä–Ω–æ–ø–ª–æ–¥–∫–∞, –†—è–±–∏–Ω–∞

**üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π "–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è":**
‚Ä¢ 10 –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
‚Ä¢ 10 –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤  
‚Ä¢ 10 –ø—Ä–∏–º–∏–∫—Å–æ–≤ –∏ —Å–∏—Ä–æ–ø–æ–≤

**‚ö†Ô∏è –ü–æ–º–Ω–∏—Ç–µ:** –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏!
    """
    await message.reply(examples_text, parse_mode='Markdown')

@dp.message(Command('recipe'))
async def recipe_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /recipe —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    user_id = message.from_user.id
    
    if not is_age_verified(user_id):
        await message.reply(
            "‚ö†Ô∏è –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
            parse_mode='Markdown'
        )
        return
    
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    base_spirit = '–¥–∂–∏–Ω'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    mocktail = False
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    for arg in args:
        if arg.lower() in BASE_SPIRITS:
            base_spirit = arg.lower()
        elif 'mock' in arg.lower():
            mocktail = True
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å—é –∏ —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–æ–º
    mocktail_text = "–±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π" if mocktail else "–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π"
    seasonal_ingredients = ", ".join(SEASONAL_OCTOBER)
    
    prompt = f"""
    –°–æ–∑–¥–∞–π —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –Ω–∞–ø–∏—Ç–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ {base_spirit} —Å —É—á–µ—Ç–æ–º —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞ –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏.
–°–µ–∑–æ–Ω: –æ–∫—Ç—è–±—Ä—å 2025 (–∏—Å–ø–æ–ª—å–∑—É–π —Å–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {seasonal_ingredients}).
    –¢–∏–ø: {mocktail_text} –Ω–∞–ø–∏—Ç–æ–∫.

–í–∫–ª—é—á–∏ –≤ —Ä–µ—Ü–µ–ø—Ç:
    1. –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞
2. –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å —Ç–æ—á–Ω—ã–º–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º–∏
3. –ú–µ—Ç–æ–¥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
4. –ü–æ–¥–∞—á–∞ –∏ —É–∫—Ä–∞—à–µ–Ω–∏–µ
    5. –ö—Ä–∞—Ç–∫—É—é –∏—Å—Ç–æ—Ä–∏—é –∏–ª–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é
6. –°–æ–≤–µ—Ç—ã –ø–æ —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥—É
7. –°–µ–∑–æ–Ω–Ω—É—é –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å

    –°–¥–µ–ª–∞–π —Ä–µ—Ü–µ–ø—Ç –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–º –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.
    """
    
    await message.reply("üçπ –°–æ–∑–¥–∞—é –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –≤–∞—Å...")
    
    try:
        recipe = await call_yandex_api(prompt)
        await message.reply(recipe)
    except Exception as e:
        await message.reply(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
@dp.callback_query(lambda c: c.data == 'age_verify_yes')
async def process_age_verify_yes(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    user_id = callback_query.from_user.id
    user_age_verified[user_id] = True
    
    await callback_query.answer("‚úÖ –í–æ–∑—Ä–∞—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
    await show_main_menu(callback_query.message)

@dp.callback_query(lambda c: c.data == 'age_verify_no')
async def process_age_verify_no(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
    await callback_query.message.reply(
        "üö´ **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω**\n\n"
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 18+ –ª–µ—Ç.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.\n\n"
        "–î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /recipe mocktail",
        parse_mode='Markdown'
    )

@dp.callback_query(lambda c: c.data == 'rules')
async def process_callback_rules(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∞–≤–∏–ª–∞'"""
    await callback_query.answer()
    await rules_command(callback_query.message)

@dp.callback_query(lambda c: c.data == 'help')
async def process_callback_help(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
    await callback_query.answer()
    await examples_command(callback_query.message)

# –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫...
@dp.callback_query(lambda c: c.data == 'recipe')
async def process_callback_recipe(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await recipe_command(callback_query.message)

@dp.message()
async def handle_other_messages(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
    user_id = message.from_user.id
    text = message.text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if contains_forbidden_content(message.text):
        await message.reply(
            "üö´ **–¢–µ–º–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞**\n\n"
            "–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö —Ç–µ–º.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /rules –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.",
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–ª—è –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã—Ö —Ç–µ–º
    if is_alcohol_related(message.text) and not is_age_verified(user_id):
        await message.reply(
            "‚ö†Ô∏è **–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞**\n\n"
            "–î–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞
    recipe_keywords = ['–∫–æ–∫—Ç–µ–π–ª—å', '—Ä–µ—Ü–µ–ø—Ç', '—Å–æ–∑–¥–∞–π', '—Ö–æ—á—É', '–Ω—É–∂–µ–Ω', '—Å–¥–µ–ª–∞–π', '–ø—Ä–∏–≥–æ—Ç–æ–≤—å']
    if any(keyword in text for keyword in recipe_keywords):
        await message.reply("üçπ –°–æ–∑–¥–∞—é —Ä–µ—Ü–µ–ø—Ç –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É...")
    
    prompt = f"""
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–∏—Ç–æ–∫: "{message.text}"

        –°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—á–∏—Ç—ã–≤–∞—è:
        1. –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (—Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω: –æ–∫—Ç—è–±—Ä—å 2025, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {', '.join(SEASONAL_OCTOBER)})
        2. –ü—Ä–∏–Ω—Ü–∏–ø—ã —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞
        3. –ë–∞–ª–∞–Ω—Å –≤–∫—É—Å–æ–≤
        4. –ü—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è

        –í–∫–ª—é—á–∏:
        1. –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞
        2. –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º–∏
        3. –ú–µ—Ç–æ–¥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        4. –ü–æ–¥–∞—á–∞ –∏ —É–∫—Ä–∞—à–µ–Ω–∏–µ
        5. –û–ø–∏—Å–∞–Ω–∏–µ –≤–∫—É—Å–∞
        6. –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é

        –°–¥–µ–ª–∞–π —Ä–µ—Ü–µ–ø—Ç –ø–æ–Ω—è—Ç–Ω—ã–º –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–º.
    """
    
    try:
        recipe = await call_yandex_api(prompt)
        await message.reply(recipe)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {str(e)}")
    return
    
    # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.reply(
        f"–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.\n\n"
        f"üí° **–°–æ–≤–µ—Ç:** –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        f"‚Ä¢ '–•–æ—á—É —Ä–µ—Ü–µ–ø—Ç —Å –¥–∂–∏–Ω–æ–º'\n"
        f"‚Ä¢ '–°–æ–∑–¥–∞–π —á—Ç–æ-—Ç–æ —Å —è–±–ª–æ–∫–∞–º–∏'\n"
        f"‚Ä¢ '–ù—É–∂–µ–Ω —Å–µ–∑–æ–Ω–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫'",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]),
        parse_mode='Markdown'
    )

@dp.message(Command('search'))
async def search_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if not args:
        await message.reply(
            "üîç **–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search [–∑–∞–ø—Ä–æ—Å]\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ `/search Manhattan` - –Ω–∞–π—Ç–∏ Manhattan\n"
            "‚Ä¢ `/search –¥–∂–∏–Ω` - —Ä–µ—Ü–µ–ø—Ç—ã —Å –¥–∂–∏–Ω–æ–º\n"
            "‚Ä¢ `/search –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π` - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã\n"
            "‚Ä¢ `/search –∞–≤—Ç–æ—Ä—Å–∫–∏–π` - –∞–≤—Ç–æ—Ä—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã\n"
            "‚Ä¢ `/search –ø—Ä–∏–º–∏–∫—Å` - –ø—Ä–∏–º–∏–∫—Å—ã –∏ —Å–∏—Ä–æ–ø—ã\n"
            "‚Ä¢ `/search —Å–∏—Ä–æ–ø` - –≤—Å–µ —Å–∏—Ä–æ–ø—ã",
            parse_mode='Markdown'
        )
        return
    
    query = " ".join(args)
    await message.reply(f"üîç –ò—â—É —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
    
    try:
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
            SELECT * FROM recipes 
            WHERE name LIKE ? OR ingredients LIKE ? OR base_spirit LIKE ? 
            OR category LIKE ? OR description LIKE ? OR source LIKE ?
        """, (f'%{query}%', f'%{query}%', f'%{query}%', f'%{query}%', f'%{query}%', f'%{query}%'))
        recipes = cursor.fetchall()
        
        if not recipes:
            await message.reply(
                "–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ.\n\n"
                "**–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
                "‚Ä¢ `/classic` - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã\n"
                "‚Ä¢ `/signature` - –∞–≤—Ç–æ—Ä—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã\n"
                "‚Ä¢ `/premix` - –ø—Ä–∏–º–∏–∫—Å—ã –∏ —Å–∏—Ä–æ–ø—ã\n"
                "‚Ä¢ `/recipe` - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç",
                parse_mode='Markdown'
            )
            return
        
        response = f"**–ù–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {len(recipes)}**\n\n"
        
        for recipe in recipes[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Ä–µ—Ü–µ–ø—Ç–æ–≤
            response += f"**{recipe[1]}**\n"
            response += f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {recipe[5]}\n"
            response += f"üç∏ –ë–∞–∑–æ–≤—ã–π —Å–ø–∏—Ä—Ç: {recipe[4]}\n"
            response += f"‚è±Ô∏è –í—Ä–µ–º—è: {recipe[12]}\n"
            response += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {recipe[7]}\n"
            response += f"ü•É –ë–æ–∫–∞–ª: {recipe[9]}\n"
            response += f"üåø –£–∫—Ä–∞—à–µ–Ω–∏–µ: {recipe[10]}\n\n"
        
        if len(recipes) > 5:
            response += f"... –∏ –µ—â–µ {len(recipes) - 5} —Ä–µ—Ü–µ–ø—Ç–æ–≤"
        
        await message.reply(response, parse_mode='Markdown')
        
        conn.close()
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")

@dp.message(Command('classic'))
async def classic_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /classic - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã"""
    await message.reply("üç∏ **–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ '–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è'**\n\n–ó–∞–≥—Ä—É–∂–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...")
    
    try:
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM recipes WHERE category = '–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π'")
        recipes = cursor.fetchall()
        
        if not recipes:
            await message.reply("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        response = f"**üìö –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã ({len(recipes)} —à—Ç.)**\n\n"
        
        for recipe in recipes:
            response += f"**{recipe[1]}**\n"
            response += f"üç∏ {recipe[4]} | ‚è±Ô∏è {recipe[12]} | ü•É {recipe[9]}\n"
            response += f"üìù {recipe[7]}\n"
            response += f"üåø {recipe[10]}\n\n"
        
        await message.reply(response, parse_mode='Markdown')
        conn.close()
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤: {str(e)}")

@dp.message(Command('signature'))
async def signature_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /signature - –∞–≤—Ç–æ—Ä—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã"""
    await message.reply("üé® **–ê–≤—Ç–æ—Ä—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ '–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è'**\n\n–ó–∞–≥—Ä—É–∂–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...")
    
    try:
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM recipes WHERE category = '–∞–≤—Ç–æ—Ä—Å–∫–∏–π'")
        recipes = cursor.fetchall()
        
        if not recipes:
            await message.reply("–ê–≤—Ç–æ—Ä—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        response = f"**üé® –ê–≤—Ç–æ—Ä—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã ({len(recipes)} —à—Ç.)**\n\n"
        
        for recipe in recipes:
            response += f"**{recipe[1]}**\n"
            response += f"üç∏ {recipe[4]} | ‚è±Ô∏è {recipe[12]} | ü•É {recipe[9]}\n"
            response += f"üìù {recipe[7]}\n"
            response += f"üåø {recipe[10]}\n\n"
        
        await message.reply(response, parse_mode='Markdown')
        conn.close()
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤: {str(e)}")

@dp.message(Command('premix'))
async def premix_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /premix - –ø—Ä–∏–º–∏–∫—Å—ã –∏ —Å–∏—Ä–æ–ø—ã"""
    await message.reply("üß™ **–ü—Ä–∏–º–∏–∫—Å—ã –∏ —Å–∏—Ä–æ–ø—ã –∏–∑ '–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è'**\n\n–ó–∞–≥—Ä—É–∂–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...")
    
    try:
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM recipes WHERE category = '–ø—Ä–∏–º–∏–∫—Å'")
        recipes = cursor.fetchall()
        
        if not recipes:
            await message.reply("–ü—Ä–∏–º–∏–∫—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        response = f"**üß™ –ü—Ä–∏–º–∏–∫—Å—ã –∏ —Å–∏—Ä–æ–ø—ã ({len(recipes)} —à—Ç.)**\n\n"
        
        for recipe in recipes:
            response += f"**{recipe[1]}**\n"
            response += f"‚è±Ô∏è {recipe[12]} | üì¶ {recipe[9]}\n"
            response += f"üìù {recipe[7]}\n"
            response += f"üîß {recipe[3]}\n\n"
        
        await message.reply(response, parse_mode='Markdown')
        conn.close()
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–º–∏–∫—Å–æ–≤: {str(e)}")

@dp.message(Command('recipe_detail'))
async def recipe_detail_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /recipe_detail - –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç"""
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if not args:
        await message.reply(
            "üìñ **–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /recipe_detail [–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞]\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ `/recipe_detail Manhattan`\n"
            "‚Ä¢ `/recipe_detail Old Fashioned`\n"
            "‚Ä¢ `/recipe_detail Penicillin`",
            parse_mode='Markdown'
        )
        return
    
    recipe_name = " ".join(args)
    await message.reply(f"üìñ –ò—â—É –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç: {recipe_name}")
    
    try:
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM recipes WHERE name LIKE ?", (f'%{recipe_name}%',))
        recipe = cursor.fetchone()
        
        if not recipe:
            await message.reply(f"–†–µ—Ü–µ–ø—Ç '{recipe_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /search –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            return
        
        response = f"**üìñ {recipe[1]}**\n\n"
        response += f"üìã **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {recipe[5]}\n"
        response += f"üç∏ **–ë–∞–∑–æ–≤—ã–π —Å–ø–∏—Ä—Ç:** {recipe[4]}\n"
        response += f"‚è±Ô∏è **–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:** {recipe[12]}\n"
        response += f"üéØ **–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {recipe[11]}\n"
        response += f"ü•É **–ë–æ–∫–∞–ª:** {recipe[9]}\n"
        response += f"üåø **–£–∫—Ä–∞—à–µ–Ω–∏–µ:** {recipe[10]}\n\n"
        response += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{recipe[7]}\n\n"
        response += f"ü•Ñ **–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**\n{recipe[2]}\n\n"
        response += f"üîß **–ú–µ—Ç–æ–¥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:**\n{recipe[3]}\n\n"
        response += f"üìö **–ò—Å—Ç–æ—á–Ω–∏–∫:** {recipe[6]}"
        
        await message.reply(response, parse_mode='Markdown')
        conn.close()
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–∞: {str(e)}")

@dp.message(Command('iba'))
async def iba_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /iba - —Ä–µ—Ü–µ–ø—Ç—ã IBA"""
    await message.reply("üç∏ **–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã IBA**\n\n–ó–∞–≥—Ä—É–∂–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...")
    
    try:
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM recipes WHERE source = 'IBA Official'")
        recipes = cursor.fetchall()
        
        if not recipes:
            await message.reply("–†–µ—Ü–µ–ø—Ç—ã IBA –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        response = f"**üç∏ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã IBA ({len(recipes)} —à—Ç.)**\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ä–µ—Ü–µ–ø—Ç–æ–≤
        for recipe in recipes[:10]:
            response += f"**{recipe[1]}**\n"
            response += f"üç∏ {recipe[4]} | ‚è±Ô∏è {recipe[12]} | ü•É {recipe[9]}\n"
            response += f"üìù {recipe[7]}\n\n"
        
        if len(recipes) > 10:
            response += f"... –∏ –µ—â–µ {len(recipes) - 10} —Ä–µ—Ü–µ–ø—Ç–æ–≤ IBA"
        
        await message.reply(response, parse_mode='Markdown')
        conn.close()
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ IBA: {str(e)}")

@dp.message(Command('iba_search'))
async def iba_search_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /iba_search - –ø–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ IBA"""
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if not args:
        await message.reply(
            "üîç **–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ IBA**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /iba_search [–∑–∞–ø—Ä–æ—Å]\n\n"
        "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ `/iba_search Manhattan` - –Ω–∞–π—Ç–∏ Manhattan\n"
            "‚Ä¢ `/iba_search –¥–∂–∏–Ω` - —Ä–µ—Ü–µ–ø—Ç—ã IBA —Å –¥–∂–∏–Ω–æ–º\n"
            "‚Ä¢ `/iba_search –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π` - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ IBA —Ä–µ—Ü–µ–ø—Ç—ã",
        parse_mode='Markdown'
    )
        return
    
    query = " ".join(args)
    await message.reply(f"üîç –ò—â—É —Ä–µ—Ü–µ–ø—Ç—ã IBA –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
    
    try:
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        
        # –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ IBA
        cursor.execute("""
            SELECT * FROM recipes 
            WHERE source = 'IBA Official' 
            AND (name LIKE ? OR ingredients LIKE ? OR base_spirit LIKE ? 
            OR category LIKE ? OR description LIKE ?)
        """, (f'%{query}%', f'%{query}%', f'%{query}%', f'%{query}%', f'%{query}%'))
        recipes = cursor.fetchall()
        
        if not recipes:
            await message.reply(
                "–†–µ—Ü–µ–ø—Ç—ã IBA –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                "**–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
                "‚Ä¢ `/iba` - –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã IBA\n"
                "‚Ä¢ `/classic` - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã\n"
                "‚Ä¢ `/search` - –æ–±—â–∏–π –ø–æ–∏—Å–∫",
                parse_mode='Markdown'
            )
            return
        
        response = f"**–ù–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ IBA: {len(recipes)}**\n\n"
        
        for recipe in recipes[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Ä–µ—Ü–µ–ø—Ç–æ–≤
            response += f"**{recipe[1]}**\n"
            response += f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {recipe[5]}\n"
            response += f"üç∏ –ë–∞–∑–æ–≤—ã–π —Å–ø–∏—Ä—Ç: {recipe[4]}\n"
            response += f"‚è±Ô∏è –í—Ä–µ–º—è: {recipe[12]}\n"
            response += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {recipe[7]}\n"
            response += f"ü•É –ë–æ–∫–∞–ª: {recipe[9]}\n"
            response += f"üåø –£–∫—Ä–∞—à–µ–Ω–∏–µ: {recipe[10]}\n\n"
        
        if len(recipes) > 5:
            response += f"... –∏ –µ—â–µ {len(recipes) - 5} —Ä–µ—Ü–µ–ø—Ç–æ–≤ IBA"
        
        await message.reply(response, parse_mode='Markdown')
        
        conn.close()
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ IBA: {str(e)}")

@dp.message(Command('iba_classic'))
async def iba_classic_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /iba_classic - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã IBA"""
    await message.reply("üç∏ **–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã IBA**\n\n–ó–∞–≥—Ä—É–∂–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...")
    
    try:
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM recipes WHERE source = 'IBA Official' AND category = 'iba_classic'")
        recipes = cursor.fetchall()
        
        if not recipes:
            await message.reply("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã IBA –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
        response = f"**üç∏ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã IBA ({len(recipes)} —à—Ç.)**\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 —Ä–µ—Ü–µ–ø—Ç–æ–≤
        for recipe in recipes[:15]:
            response += f"**{recipe[1]}**\n"
            response += f"üç∏ {recipe[4]} | ‚è±Ô∏è {recipe[12]} | ü•É {recipe[9]}\n"
            response += f"üìù {recipe[7]}\n\n"
        
        if len(recipes) > 15:
            response += f"... –∏ –µ—â–µ {len(recipes) - 15} –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ IBA"
        
        await message.reply(response, parse_mode='Markdown')
        conn.close()
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ IBA: {str(e)}")

@dp.message(Command('bible'))
async def bible_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bible - —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ –ë–∏–±–ª–∏–∏ –±–∞—Ä–º–µ–Ω–∞"""
    await message.reply("üìñ **–†–µ—Ü–µ–ø—Ç—ã –∏–∑ '–ë–∏–±–ª–∏—è –±–∞—Ä–º–µ–Ω–∞'**\n\n–ó–∞–≥—Ä—É–∂–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...")
    
    try:
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM recipes WHERE source = '–ë–∏–±–ª–∏—è –±–∞—Ä–º–µ–Ω–∞'")
        recipes = cursor.fetchall()
        
        if not recipes:
            await message.reply("–†–µ—Ü–µ–ø—Ç—ã –∏–∑ '–ë–∏–±–ª–∏—è –±–∞—Ä–º–µ–Ω–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
        response = f"**üìñ –†–µ—Ü–µ–ø—Ç—ã –∏–∑ '–ë–∏–±–ª–∏—è –±–∞—Ä–º–µ–Ω–∞' ({len(recipes)} —à—Ç.)**\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ä–µ—Ü–µ–ø—Ç–æ–≤
        for recipe in recipes[:10]:
            response += f"**{recipe[1]}**\n"
            response += f"üç∏ {recipe[4]} | ‚è±Ô∏è {recipe[12]} | ü•É {recipe[9]}\n"
            response += f"üìù {recipe[7]}\n\n"
        
        if len(recipes) > 10:
            response += f"... –∏ –µ—â–µ {len(recipes) - 10} —Ä–µ—Ü–µ–ø—Ç–æ–≤"
        
        await message.reply(response, parse_mode='Markdown')
        conn.close()
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏–∑ '–ë–∏–±–ª–∏—è –±–∞—Ä–º–µ–Ω–∞': {str(e)}")

@dp.message(Command('aperitif'))
async def aperitif_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /aperitif - —Ä–µ—Ü–µ–ø—Ç—ã –∞–ø–µ—Ä–∏—Ç–∏–≤–æ–≤"""
    await message.reply("üç∏ **–†–µ—Ü–µ–ø—Ç—ã –∞–ø–µ—Ä–∏—Ç–∏–≤–æ–≤**\n\n–ó–∞–≥—Ä—É–∂–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...")
    
    try:
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM recipes WHERE source = '–ê–ø–µ—Ä–∏—Ç–∏–≤ –ö–æ—Ä–æ–ª—å –∫–æ–∫—Ç–µ–π–ª—è'")
        recipes = cursor.fetchall()
        
        if not recipes:
            await message.reply("–†–µ—Ü–µ–ø—Ç—ã –∞–ø–µ—Ä–∏—Ç–∏–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        response = f"**üç∏ –†–µ—Ü–µ–ø—Ç—ã –∞–ø–µ—Ä–∏—Ç–∏–≤–æ–≤ ({len(recipes)} —à—Ç.)**\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ä–µ—Ü–µ–ø—Ç–æ–≤
        for recipe in recipes[:10]:
            response += f"**{recipe[1]}**\n"
            response += f"üç∏ {recipe[4]} | ‚è±Ô∏è {recipe[12]} | ü•É {recipe[9]}\n"
            response += f"üìù {recipe[7]}\n\n"
        
        if len(recipes) > 10:
            response += f"... –∏ –µ—â–µ {len(recipes) - 10} —Ä–µ—Ü–µ–ø—Ç–æ–≤"
        
        await message.reply(response, parse_mode='Markdown')
        conn.close()
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∞–ø–µ—Ä–∏—Ç–∏–≤–æ–≤: {str(e)}")

@dp.message(Command('theory'))
async def theory_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /theory - —Ç–µ–æ—Ä–∏—è –±–∞—Ä–º–µ–Ω—Å—Ç–≤–∞"""
    await message.reply("üìö **–¢–µ–æ—Ä–∏—è –±–∞—Ä–º–µ–Ω—Å—Ç–≤–∞**\n\n–ó–∞–≥—Ä—É–∂–∞—é –∑–Ω–∞–Ω–∏—è...")
    
    try:
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM recipes WHERE category = 'theory'")
        theories = cursor.fetchall()
        
        if not theories:
            await message.reply("–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        response = f"**üìö –¢–µ–æ—Ä–∏—è –±–∞—Ä–º–µ–Ω—Å—Ç–≤–∞ ({len(theories)} —Ç–µ–º)**\n\n"
        
        for theory in theories:
            response += f"**{theory[1]}**\n"
            response += f"üìù {theory[7]}\n"
            response += f"üîß {theory[3]}\n\n"
        
        await message.reply(response, parse_mode='Markdown')
        conn.close()
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–æ—Ä–∏–∏: {str(e)}")

@dp.message(Command('preparation'))
async def preparation_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /preparation - —Ä–µ—Ü–µ–ø—Ç—ã –∑–∞–≥–æ—Ç–æ–≤–æ–∫"""
    await message.reply("üß™ **–†–µ—Ü–µ–ø—Ç—ã –∑–∞–≥–æ—Ç–æ–≤–æ–∫**\n\n–ó–∞–≥—Ä—É–∂–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...")
    
    try:
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM recipes WHERE category = 'preparation'")
        preparations = cursor.fetchall()
        
        if not preparations:
            await message.reply("–†–µ—Ü–µ–ø—Ç—ã –∑–∞–≥–æ—Ç–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        response = f"**üß™ –†–µ—Ü–µ–ø—Ç—ã –∑–∞–≥–æ—Ç–æ–≤–æ–∫ ({len(preparations)} —à—Ç.)**\n\n"
        
        for prep in preparations:
            response += f"**{prep[1]}**\n"
            response += f"‚è±Ô∏è {prep[12]} | üì¶ {prep[9]}\n"
            response += f"üìù {prep[7]}\n"
            response += f"üîß {prep[3]}\n\n"
        
        await message.reply(response, parse_mode='Markdown')
        conn.close()
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∑–∞–≥–æ—Ç–æ–≤–æ–∫: {str(e)}")

@dp.message(Command('techniques'))
async def techniques_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /techniques - —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"""
    await message.reply("üîß **–¢–µ—Ö–Ω–∏–∫–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è**\n\n–ó–∞–≥—Ä—É–∂–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...")
    
    try:
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM recipes WHERE category = 'cocktail_code_technique'")
        techniques = cursor.fetchall()
        
        if not techniques:
            await message.reply("–¢–µ—Ö–Ω–∏–∫–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        response = f"**üîß –¢–µ—Ö–Ω–∏–∫–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è ({len(techniques)} —à—Ç.)**\n\n"
        
        for technique in techniques:
            response += f"**{technique[1]}**\n"
            response += f"üìù {technique[7]}\n"
            response += f"üîß {technique[3]}\n"
            response += f"‚è±Ô∏è {technique[12]}\n\n"
        
        await message.reply(response, parse_mode='Markdown')
        conn.close()
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Ö–Ω–∏–∫: {str(e)}")

@dp.message(Command('syrups'))
async def syrups_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /syrups - —Ä–µ—Ü–µ–ø—Ç—ã —Å–∏—Ä–æ–ø–æ–≤"""
    await message.reply("üß™ **–†–µ—Ü–µ–ø—Ç—ã —Å–∏—Ä–æ–ø–æ–≤**\n\n–ó–∞–≥—Ä—É–∂–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...")
    
    try:
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM recipes WHERE category = 'cocktail_code_syrup'")
        syrups = cursor.fetchall()
        
        if not syrups:
            await message.reply("–†–µ—Ü–µ–ø—Ç—ã —Å–∏—Ä–æ–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        response = f"**üß™ –†–µ—Ü–µ–ø—Ç—ã —Å–∏—Ä–æ–ø–æ–≤ ({len(syrups)} —à—Ç.)**\n\n"
        
        for syrup in syrups:
            response += f"**{syrup[1]}**\n"
            response += f"‚è±Ô∏è {syrup[12]} | üì¶ {syrup[9]}\n"
            response += f"üìù {syrup[7]}\n"
            response += f"üîß {syrup[3]}\n\n"
        
        await message.reply(response, parse_mode='Markdown')
        conn.close()
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å–∏—Ä–æ–ø–æ–≤: {str(e)}")

@dp.message(Command('extended'))
async def extended_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /extended - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ –ö–æ–¥ –ö–æ–∫—Ç–µ–π–ª—è"""
    await message.reply("üç∏ **–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ '–ö–æ–¥ –ö–æ–∫—Ç–µ–π–ª—è'**\n\n–ó–∞–≥—Ä—É–∂–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...")
    
    try:
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM recipes WHERE category = 'cocktail_code_extended'")
        recipes = cursor.fetchall()
        
        if not recipes:
            await message.reply("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        response = f"**üç∏ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã ({len(recipes)} —à—Ç.)**\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ä–µ—Ü–µ–ø—Ç–æ–≤
        for recipe in recipes[:10]:
            response += f"**{recipe[1]}**\n"
            response += f"üç∏ {recipe[4]} | ‚è±Ô∏è {recipe[12]} | ü•É {recipe[9]}\n"
            response += f"üìù {recipe[7]}\n\n"
        
        if len(recipes) > 10:
            response += f"... –∏ –µ—â–µ {len(recipes) - 10} —Ä–µ—Ü–µ–ø—Ç–æ–≤"
        
        await message.reply(response, parse_mode='Markdown')
        conn.close()
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤: {str(e)}")

@dp.message(Command('molecular'))
async def molecular_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /molecular - –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏"""
    await message.reply("üß™ **–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑ 'Liquid Intelligence'**\n\n–ó–∞–≥—Ä—É–∂–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...")
    
    try:
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM recipes WHERE category = 'liquid_intelligence_technique'")
        techniques = cursor.fetchall()
        
        if not techniques:
            await message.reply("–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        response = f"**üß™ –ú–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ ({len(techniques)} —à—Ç.)**\n\n"
        
        for technique in techniques:
            response += f"**{technique[1]}**\n"
            response += f"üìù {technique[7]}\n"
            response += f"üîß {technique[3]}\n"
            response += f"‚è±Ô∏è {technique[12]}\n\n"
        
        await message.reply(response, parse_mode='Markdown')
        conn.close()
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫: {str(e)}")

@dp.message(Command('scientific'))
async def scientific_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /scientific - –Ω–∞—É—á–Ω—ã–µ –∑–∞–≥–æ—Ç–æ–≤–∫–∏"""
    await message.reply("üî¨ **–ù–∞—É—á–Ω—ã–µ –∑–∞–≥–æ—Ç–æ–≤–∫–∏ –∏–∑ 'Liquid Intelligence'**\n\n–ó–∞–≥—Ä—É–∂–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...")
    
    try:
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM recipes WHERE category = 'liquid_intelligence_preparation'")
        preparations = cursor.fetchall()
        
        if not preparations:
            await message.reply("–ù–∞—É—á–Ω—ã–µ –∑–∞–≥–æ—Ç–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        response = f"**üî¨ –ù–∞—É—á–Ω—ã–µ –∑–∞–≥–æ—Ç–æ–≤–∫–∏ ({len(preparations)} —à—Ç.)**\n\n"
        
        for prep in preparations:
            response += f"**{prep[1]}**\n"
            response += f"‚è±Ô∏è {prep[12]} | üì¶ {prep[9]}\n"
            response += f"üìù {prep[7]}\n"
            response += f"üîß {prep[3]}\n\n"
        
        await message.reply(response, parse_mode='Markdown')
        conn.close()
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—É—á–Ω—ã—Ö –∑–∞–≥–æ—Ç–æ–≤–æ–∫: {str(e)}")

@dp.message(Command('liquid_intelligence'))
async def liquid_intelligence_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /liquid_intelligence - –Ω–∞—É—á–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏"""
    await message.reply("üß™ **–ù–∞—É—á–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏ –∏–∑ 'Liquid Intelligence'**\n\n–ó–∞–≥—Ä—É–∂–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...")
    
    try:
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM recipes WHERE category = 'liquid_intelligence_cocktail'")
        cocktails = cursor.fetchall()
        
        if not cocktails:
            await message.reply("–ù–∞—É—á–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        response = f"**üß™ –ù–∞—É—á–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏ ({len(cocktails)} —à—Ç.)**\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–æ–∫—Ç–µ–π–ª–µ–π
        for cocktail in cocktails[:10]:
            response += f"**{cocktail[1]}**\n"
            response += f"üç∏ {cocktail[4]} | ‚è±Ô∏è {cocktail[12]} | ü•É {cocktail[9]}\n"
            response += f"üìù {cocktail[7]}\n\n"
        
        if len(cocktails) > 10:
            response += f"... –∏ –µ—â–µ {len(cocktails) - 10} –∫–æ–∫—Ç–µ–π–ª–µ–π"
        
        await message.reply(response, parse_mode='Markdown')
        conn.close()
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—É—á–Ω—ã—Ö –∫–æ–∫—Ç–µ–π–ª–µ–π: {str(e)}")

@dp.message(Command('flavor_principles'))
async def flavor_principles_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /flavor_principles - –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞"""
    await message.reply("üçΩÔ∏è **–ü—Ä–∏–Ω—Ü–∏–ø—ã —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞ –∏–∑ 'The Flavor Bible'**\n\n–ó–∞–≥—Ä—É–∂–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...")
    
    try:
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM recipes WHERE category = 'flavor_bible_principle'")
        principles = cursor.fetchall()
        
        if not principles:
            await message.reply("–ü—Ä–∏–Ω—Ü–∏–ø—ã —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        response = f"**üçΩÔ∏è –ü—Ä–∏–Ω—Ü–∏–ø—ã —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞ ({len(principles)} —à—Ç.)**\n\n"
        
        for principle in principles:
            response += f"**{principle[1]}**\n"
            response += f"üìù {principle[7]}\n"
            response += f"üîß {principle[3]}\n\n"
        
        await message.reply(response, parse_mode='Markdown')
        conn.close()
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞: {str(e)}")

@dp.message(Command('flavor_combinations'))
async def flavor_combinations_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /flavor_combinations - —Å–æ—á–µ—Ç–∞–Ω–∏—è –≤–∫—É—Å–æ–≤"""
    await message.reply("üçΩÔ∏è **–°–æ—á–µ—Ç–∞–Ω–∏—è –≤–∫—É—Å–æ–≤ –∏–∑ 'The Flavor Bible'**\n\n–ó–∞–≥—Ä—É–∂–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...")
    
    try:
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM recipes WHERE category = 'flavor_bible_combination'")
        combinations = cursor.fetchall()
        
        if not combinations:
            await message.reply("–°–æ—á–µ—Ç–∞–Ω–∏—è –≤–∫—É—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        response = f"**üçΩÔ∏è –°–æ—á–µ—Ç–∞–Ω–∏—è –≤–∫—É—Å–æ–≤ ({len(combinations)} —à—Ç.)**\n\n"
        
        for combo in combinations:
            response += f"**{combo[1]}**\n"
            response += f"üìù {combo[7]}\n"
            response += f"üîß {combo[3]}\n\n"
        
        await message.reply(response, parse_mode='Markdown')
        conn.close()
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—á–µ—Ç–∞–Ω–∏–π –≤–∫—É—Å–æ–≤: {str(e)}")

@dp.message(Command('seasonal_pairings'))
async def seasonal_pairings_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /seasonal_pairings - —Å–µ–∑–æ–Ω–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è"""
    await message.reply("üçΩÔ∏è **–°–µ–∑–æ–Ω–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è –∏–∑ 'The Flavor Bible'**\n\n–ó–∞–≥—Ä—É–∂–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...")
    
    try:
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM recipes WHERE category = 'flavor_bible_seasonal'")
        pairings = cursor.fetchall()
        
        if not pairings:
            await message.reply("–°–µ–∑–æ–Ω–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        response = f"**üçΩÔ∏è –°–µ–∑–æ–Ω–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è ({len(pairings)} —à—Ç.)**\n\n"
        
        for pairing in pairings:
            response += f"**{pairing[1]}**\n"
            response += f"üìù {pairing[7]}\n"
            response += f"üîß {pairing[3]}\n\n"
        
        await message.reply(response, parse_mode='Markdown')
        conn.close()
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ–∑–æ–Ω–Ω—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π: {str(e)}")

@dp.message(Command('cocktail_pairings'))
async def cocktail_pairings_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cocktail_pairings - —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥ –¥–ª—è –∫–æ–∫—Ç–µ–π–ª–µ–π"""
    await message.reply("üçΩÔ∏è **–§—É–¥–ø–µ–π—Ä–∏–Ω–≥ –¥–ª—è –∫–æ–∫—Ç–µ–π–ª–µ–π –∏–∑ 'The Flavor Bible'**\n\n–ó–∞–≥—Ä—É–∂–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...")
    
    try:
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM recipes WHERE category = 'flavor_bible_cocktail'")
        pairings = cursor.fetchall()
        
        if not pairings:
            await message.reply("–§—É–¥–ø–µ–π—Ä–∏–Ω–≥ –¥–ª—è –∫–æ–∫—Ç–µ–π–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        response = f"**üçΩÔ∏è –§—É–¥–ø–µ–π—Ä–∏–Ω–≥ –¥–ª—è –∫–æ–∫—Ç–µ–π–ª–µ–π ({len(pairings)} —à—Ç.)**\n\n"
        
        for pairing in pairings:
            response += f"**{pairing[1]}**\n"
            response += f"üìù {pairing[7]}\n"
            response += f"üîß {pairing[3]}\n\n"
        
        await message.reply(response, parse_mode='Markdown')
        conn.close()
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞ –¥–ª—è –∫–æ–∫—Ç–µ–π–ª–µ–π: {str(e)}")

@dp.message(Command('el_copitas'))
async def el_copitas_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /el_copitas - –∞–≤—Ç–æ—Ä—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ El Copitas Bar"""
    await message.reply("üç∏ **–ê–≤—Ç–æ—Ä—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ El Copitas Bar**\n\n–ó–∞–≥—Ä—É–∂–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...")
    
    try:
        conn = sqlite3.connect('cocktails.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM recipes WHERE source = 'El Copitas Bar'")
        cocktails = cursor.fetchall()
        
        if not cocktails:
            await message.reply("–ê–≤—Ç–æ—Ä—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        response = f"**üç∏ –ê–≤—Ç–æ—Ä—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã El Copitas Bar ({len(cocktails)} —à—Ç.)**\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 –∫–æ–∫—Ç–µ–π–ª–µ–π
        for cocktail in cocktails[:15]:
            response += f"**{cocktail[1]}**\n"
            response += f"üç∏ {cocktail[4]} | ‚è±Ô∏è {cocktail[12]} | ü•É {cocktail[9]}\n"
            response += f"üìù {cocktail[7]}\n\n"
        
        if len(cocktails) > 15:
            response += f"... –∏ –µ—â–µ {len(cocktails) - 15} —Ä–µ—Ü–µ–ø—Ç–æ–≤"
        
        await message.reply(response, parse_mode='Markdown')
        conn.close()
        
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤: {str(e)}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print(f"üç∏ {BOT_NAME} –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    print("üçÇ –°–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –æ–∫—Ç—è–±—Ä—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    print("ü§ñ Yandex GPT –ø–æ–¥–∫–ª—é—á–µ–Ω")
    print("üõ°Ô∏è –°–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
    print("üìö –ë–∞–∑–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ '–ö–æ–¥ –∫–æ–∫—Ç–µ–π–ª—è' –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    print("üç∏ 200+ —Ä–µ—Ü–µ–ø—Ç–æ–≤ IBA –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    print("üìñ –†–µ—Ü–µ–ø—Ç—ã –∏–∑ '–ë–∏–±–ª–∏—è –±–∞—Ä–º–µ–Ω–∞' –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    print("üç∏ –†–µ—Ü–µ–ø—Ç—ã –∞–ø–µ—Ä–∏—Ç–∏–≤–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    print("üìö –¢–µ–æ—Ä–∏—è –±–∞—Ä–º–µ–Ω—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    print("üß™ –†–µ—Ü–µ–ø—Ç—ã –∑–∞–≥–æ—Ç–æ–≤–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    print("üîß –¢–µ—Ö–Ω–∏–∫–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    print("üß™ –†–µ—Ü–µ–ø—Ç—ã —Å–∏—Ä–æ–ø–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    print("üç∏ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    print("üß™ –ú–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    print("üî¨ –ù–∞—É—á–Ω—ã–µ –∑–∞–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    print("üß™ –ù–∞—É—á–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    print("üçΩÔ∏è –ü—Ä–∏–Ω—Ü–∏–ø—ã —Ñ—É–¥–ø–µ–π—Ä–∏–Ω–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    print("üçΩÔ∏è –°–æ—á–µ—Ç–∞–Ω–∏—è –≤–∫—É—Å–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    print("üçΩÔ∏è –°–µ–∑–æ–Ω–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    print("üçΩÔ∏è –§—É–¥–ø–µ–π—Ä–∏–Ω–≥ –¥–ª—è –∫–æ–∫—Ç–µ–π–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω")
    print("üç∏ –ê–≤—Ç–æ—Ä—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã El Copitas Bar –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())