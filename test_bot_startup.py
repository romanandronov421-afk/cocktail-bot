#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ –ø–æ–ª–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º
"""

import sys
import os

def test_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    try:
        import asyncio
        print("  ‚úÖ asyncio")
        
        from dotenv import load_dotenv
        print("  ‚úÖ dotenv")
        
        import requests
        print("  ‚úÖ requests")
        
        from aiogram import Bot, Dispatcher
        print("  ‚úÖ aiogram")
        
        from database import CocktailDatabase
        print("  ‚úÖ database")
        
        from hybrid_processor import HybridCocktailProcessor
        print("  ‚úÖ hybrid_processor")
        
        from cocktail_party_processor import CocktailPartyProcessor
        print("  ‚úÖ cocktail_party_processor")
        
        from enhanced_foodpairing_processor import EnhancedFoodPairingProcessor
        print("  ‚úÖ enhanced_foodpairing_processor")
        
        return True
    except ImportError as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_env_variables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    from dotenv import load_dotenv
    load_dotenv('env_file.txt')
    
    required_vars = ['TELEGRAM_BOT_TOKEN', 'YANDEX_API_KEY', 'FOLDER_ID']
    all_ok = True
    
    for var in required_vars:
        value = os.getenv(var)
        if value:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            masked = value[:4] + '...' + value[-4:] if len(value) > 8 else '***'
            print(f"  ‚úÖ {var}: {masked}")
        else:
            print(f"  ‚ùå {var}: –ù–ï –ù–ê–ô–î–ï–ù")
            all_ok = False
    
    return all_ok

def test_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from database import CocktailDatabase
        db = CocktailDatabase()
        print("  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        try:
            recipes = db.search_recipes("test")
            print(f"  ‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {len(recipes) if recipes else 0})")
        except:
            print("  ‚ö†Ô∏è  –ü–æ–∏—Å–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ")
        
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        return False

def test_processors():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤...")
    
    try:
        from hybrid_processor import HybridCocktailProcessor
        hybrid = HybridCocktailProcessor()
        print("  ‚úÖ HybridCocktailProcessor")
        
        from cocktail_party_processor import CocktailPartyProcessor
        party = CocktailPartyProcessor()
        print("  ‚úÖ CocktailPartyProcessor")
        
        from enhanced_foodpairing_processor import EnhancedFoodPairingProcessor
        enhanced = EnhancedFoodPairingProcessor()
        print("  ‚úÖ EnhancedFoodPairingProcessor")
        
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_bot_import():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –±–æ—Ç–∞"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ bot.py...")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        import bot
        print("  ‚úÖ bot.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if hasattr(bot, 'RUSSIAN_HORECA_SOURCES'):
            print(f"  ‚úÖ –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(bot.RUSSIAN_HORECA_SOURCES)}")
        
        if hasattr(bot, 'FLAVOR_PAIRS'):
            print(f"  ‚úÖ –í–∫—É—Å–æ–≤—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è: {len(bot.FLAVOR_PAIRS)}")
        
        if hasattr(bot, 'SEASONAL_INGREDIENTS'):
            print(f"  ‚úÖ –°–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ bot.py: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 50)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê")
    print("=" * 50)
    
    results = {
        'imports': test_imports(),
        'env': test_env_variables(),
        'database': test_database(),
        'processors': test_processors(),
        'bot_import': test_bot_import()
    }
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} - {test_name}")
    
    all_passed = all(results.values())
    
    print("\n" + "=" * 50)
    if all_passed:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python bot.py")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("‚ö†Ô∏è  –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
    print("=" * 50)
    
    return 0 if all_passed else 1

if __name__ == '__main__':
    sys.exit(main())

